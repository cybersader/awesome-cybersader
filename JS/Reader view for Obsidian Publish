// READER VIEW

// Iconos SVG para los estados visible y oculto
const iconVisible = `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-maximize-2"><polyline points="15 3 21 3 21 9"/><polyline points="9 21 3 21 3 15"/><line x1="21" x2="14" y1="3" y2="10"/><line x1="3" x2="10" y1="21" y2="14"/></svg>`; // SVG para cuando las sidebars están visibles
const iconHidden = `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-minimize-2"><polyline points="4 14 10 14 10 20"/><polyline points="20 10 14 10 14 4"/><line x1="14" x2="21" y1="10" y2="3"/><line x1="3" x2="10" y1="21" y2="14"/></svg>`; // SVG para cuando las sidebars están ocultas

// Función para alternar la clase 'reader-view' en todas las instancias de .node-insert-event
function toggleReaderView() {
  const markdownPreviews = document.querySelectorAll('.node-insert-event');
  const toggleButton = document.querySelector('#toggle-sidebar-btn');

  if (markdownPreviews.length > 0 && toggleButton) {
    const isReaderView = Array.from(markdownPreviews).some(preview => preview.classList.contains('reader-view'));

    markdownPreviews.forEach(preview => {
      if (isReaderView) {
        preview.classList.remove('reader-view');
      } else {
        preview.classList.add('reader-view');
      }
    });

    // Cambia el icono del botón según el estado de la clase 'reader-view'
    toggleButton.innerHTML = isReaderView ? iconVisible : iconHidden;

    // Guardar el estado en localStorage
    localStorage.setItem('readerView', !isReaderView);
  }
}

// Añadir un evento de escucha para la tecla "r"
document.addEventListener('keydown', function(event) {
  const activeElement = document.activeElement;
  const isSearchInputFocused = activeElement && (activeElement.tagName === 'INPUT' || activeElement.tagName === 'TEXTAREA');

  if (event.key === 'r' && !event.ctrlKey && !event.metaKey && !event.altKey && !event.shiftKey && !isSearchInputFocused) {
    toggleReaderView();
  }
});

// Función para verificar y aplicar el estado de visibilidad inicial
function applyInitialVisibilityState() {
  const markdownPreviews = document.querySelectorAll('.node-insert-event');
  const toggleButton = document.querySelector('#toggle-sidebar-btn');

  // Obtener el estado de localStorage
  const isReaderView = localStorage.getItem('readerView') === 'true';

  markdownPreviews.forEach(preview => {
    if (isReaderView) {
      preview.classList.add('reader-view');
    } else {
      preview.classList.remove('reader-view');
    }
  });

  toggleButton.innerHTML = isReaderView ? iconHidden : iconVisible;
}

// Función para crear y añadir el botón de alternar al .site-body-center-column
function addToggleButton() {
  const siteBodyCenterColumn = document.querySelector('.site-body-center-column');
  if (siteBodyCenterColumn) {
    // Crea el botón
    const toggleButton = document.createElement('button');
    toggleButton.id = 'toggle-sidebar-btn';
    toggleButton.setAttribute('aria-label', 'Toggle reader view');

    // Establece el icono inicial del botón
    toggleButton.innerHTML = iconVisible;

    // Añade el evento de clic al botón
    toggleButton.addEventListener('click', toggleReaderView);

    // Añade el botón al .site-body-center-column
    siteBodyCenterColumn.appendChild(toggleButton);
  }
}

// Función para iniciar el observador de mutaciones
function waitForSiteBodyCenterColumn() {
  const observer = new MutationObserver((mutations, obs) => {
    if (document.querySelector('.site-body-center-column')) {
      addToggleButton();
      applyInitialVisibilityState(); // Aplica el estado de visibilidad inicial
      obs.disconnect(); // Detiene el observador una vez que el .site-body-center-column ha sido encontrado
    }
  });

  observer.observe(document.body, {
    childList: true,
    subtree: true,
  });
}

// Función para verificar el parámetro de la URL y activar el reader-view si es necesario
function checkURLParameter() {
  const urlParams = new URLSearchParams(window.location.search);
  if (urlParams.get('reader') === 'true') {
    const markdownPreviews = document.querySelectorAll('.node-insert-event');
    markdownPreviews.forEach(preview => {
      preview.classList.add('reader-view');
    });

    // Actualizar el icono del botón
    const toggleButton = document.querySelector('#toggle-sidebar-btn');
    if (toggleButton) {
      toggleButton.innerHTML = iconHidden;
    }

    // Guardar el estado en localStorage
    localStorage.setItem('readerView', true);
  }
}

// Función para restablecer el estado de la vista de lectura después de la navegación
function resetReaderViewAfterNavigation() {
  document.addEventListener('click', (event) => {
    if (event.target.closest('.site-body-left-column-site-logo, .nav-file-title, .nav-folder-title, .nav-file, .nav-folder')) {
      setTimeout(applyInitialVisibilityState, 100); // Espera un momento para que la navegación se complete
    }
  });
}

// Función para restablecer el estado de la vista de lectura después de la carga completa de la página
function resetReaderViewOnLoad() {
  window.addEventListener('load', applyInitialVisibilityState);
}

// Ejecuta la función waitForSiteBodyCenterColumn cuando el script se carga
waitForSiteBodyCenterColumn();

// Verifica el parámetro de la URL al cargar la página
checkURLParameter();

// Restablece el estado de la vista de lectura después de la navegación
resetReaderViewAfterNavigation();

// Restablece el estado de la vista de lectura después de la carga completa de la página
resetReaderViewOnLoad();

// END TOGGLE READER VIEW