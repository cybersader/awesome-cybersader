/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => EnterAboveLinePlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var EnterAboveLinePlugin = class extends import_obsidian.Plugin {
  async onload() {
    this.addCommand({
      id: "add-property",
      name: "Turn On Reverse Mode for Current Note",
      editorCallback: (editor, view) => {
        const propertyKey = "reverseStatus";
        const propertyValue = "true";
        const file = view.file;
        if (!file) {
          return;
        }
        this.app.vault.read(file).then((content) => {
          const frontmatterRegex = /^---\n([\s\S]*?)\n---\n/;
          const match = content.match(frontmatterRegex);
          if (match) {
            const currentFrontmatter = match[1];
            if (currentFrontmatter.includes(propertyKey)) {
              const updatedFrontmatter = currentFrontmatter.replace(
                new RegExp(`${propertyKey}:.*`, "g"),
                `${propertyKey}: ${propertyValue}`
              );
              const newContent = content.replace(
                frontmatterRegex,
                `---
${updatedFrontmatter}
---
`
              );
              this.app.vault.modify(file, newContent);
            } else {
              const newFrontmatter = `${currentFrontmatter}
${propertyKey}: ${propertyValue}`;
              const newContent = content.replace(
                frontmatterRegex,
                `---
${newFrontmatter}
---
`
              );
              this.app.vault.modify(file, newContent);
            }
          } else {
            const newContent = `---
${propertyKey}: ${propertyValue}
---
${content}`;
            this.app.vault.modify(file, newContent);
          }
        });
      }
    });
    this.addCommand({
      id: "set-property-false",
      name: "Turn Off Reverse Mode for Current Note",
      editorCallback: (editor, view) => {
        const propertyKey = "reverseStatus";
        const propertyValue = "false";
        const file = view.file;
        if (!file) {
          return;
        }
        this.app.vault.read(file).then((content) => {
          const frontmatterRegex = /^---\n([\s\S]*?)\n---\n/;
          const match = content.match(frontmatterRegex);
          if (match) {
            const currentFrontmatter = match[1];
            if (currentFrontmatter.includes(propertyKey)) {
              const updatedFrontmatter = currentFrontmatter.replace(
                new RegExp(`${propertyKey}:.*`, "g"),
                `${propertyKey}: ${propertyValue}`
              );
              const newContent = content.replace(
                frontmatterRegex,
                `---
${updatedFrontmatter}
---
`
              );
              this.app.vault.modify(file, newContent);
            } else {
              const newFrontmatter = `${currentFrontmatter}
${propertyKey}: ${propertyValue}`;
              const newContent = content.replace(
                frontmatterRegex,
                `---
${newFrontmatter}
---
`
              );
              this.app.vault.modify(file, newContent);
            }
          } else {
            const newContent = `---
${propertyKey}: ${propertyValue}
---
${content}`;
            this.app.vault.modify(file, newContent);
          }
        });
      }
    });
    const isPropertyTrue = async (file, propertyKey) => {
      try {
        const content = await this.app.vault.read(file);
        if (typeof content !== "string") {
          console.error("File content is not a string.");
          return false;
        }
        const frontmatterRegex = /^---\n([\s\S]*?)\n---\n/;
        const match = content.match(frontmatterRegex);
        if (match) {
          const frontmatter = match[1];
          const propertyRegex = new RegExp(`${propertyKey}:\\s*true`, "i");
          return propertyRegex.test(frontmatter);
        } else {
          return false;
        }
      } catch (error) {
        console.error("Error reading file content:", error);
        return false;
      }
    };
    this.addCommand({
      id: "reverse-lines",
      name: "Reverse Lines in Current Note",
      editorCallback: (editor, view) => {
        const allText = editor.getValue();
        const lines = allText.split("\n");
        const reversedLines = lines.reverse().join("\n");
        editor.setValue(reversedLines);
      }
    });
    this.registerDomEvent(document, "keydown", (event) => {
      if (event.key === "Enter") {
        const handleEnterKey = async () => {
          const activeView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
          if (!activeView)
            return;
          const isTrue = await isPropertyTrue.call(this, activeView.file, "reverseStatus");
          if (!isTrue)
            return;
          const editor = activeView.editor;
          const cursor = editor.getCursor();
          editor.replaceRange("\n", { line: cursor.line - 1, ch: 0 });
          editor.setCursor({ line: cursor.line - 1, ch: 0 });
          editor.replaceRange("", { line: cursor.line + 1, ch: -1 }, { line: cursor.line + 2, ch: 0 });
        };
        handleEnterKey();
      }
    });
  }
  onunload() {
    console.log("Enter Above Line plugin unloaded");
  }
};


/* nosourcemap */