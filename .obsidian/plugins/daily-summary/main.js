/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => DailyDigestPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");

// setting.ts
var DEFAULT_SETTINGS = {
  apiKey: "",
  apiEndpoint: "",
  ollamaModel: "",
  openaiModel: "gpt-4o-mini",
  reportLocation: "/",
  excludedFolders: [],
  promptTemplate: "Please summarize the main content of today's notes:\n\n{{notes}}"
};

// main.ts
var DailyDigestPlugin = class extends import_obsidian.Plugin {
  settings;
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new DailyDigestSettingTab(this.app, this));
    this.addCommand({
      id: "generate-daily-report",
      name: "Generate daily report",
      callback: () => this.generateDailyReport(0)
    });
    this.addCommand({
      id: "generate-previous-day-report",
      name: "Generate previous day report",
      callback: () => {
        const modal = new DaysSelectionModal(this.app, async (days) => {
          if (days > 0) days = -days;
          await this.generateDailyReport(days);
        });
        modal.open();
      }
    });
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async generateDailyReport(daysOffset = 0) {
    try {
      let targetDate = /* @__PURE__ */ new Date();
      targetDate.setDate(targetDate.getDate() + daysOffset);
      targetDate = new Date(targetDate.getFullYear(), targetDate.getMonth(), targetDate.getDate());
      const files = this.app.vault.getMarkdownFiles();
      const todayNotes = files.filter((file) => {
        const fileDate = new Date(file.stat.ctime);
        const fileCreateDate = new Date(fileDate.getFullYear(), fileDate.getMonth(), fileDate.getDate()).getTime();
        const modifyDate = new Date(file.stat.mtime);
        const fileModifyDate = new Date(modifyDate.getFullYear(), modifyDate.getMonth(), modifyDate.getDate()).getTime();
        const isExcluded = this.settings.excludedFolders.some((folder) => {
          if (!folder) return false;
          const normalizedFolder = (0, import_obsidian.normalizePath)(folder);
          const normalizedFilePath = (0, import_obsidian.normalizePath)(file.path);
          return normalizedFilePath.startsWith(normalizedFolder + "/") || normalizedFilePath === normalizedFolder;
        });
        return !isExcluded && (fileCreateDate === targetDate.getTime() || fileModifyDate === targetDate.getTime());
      });
      new import_obsidian.Notice(`Found ${todayNotes.length} notes`);
      if (todayNotes.length === 0) {
        new import_obsidian.Notice(`No notes found for ${targetDate.toISOString().split("T")[0]}`);
        return;
      }
      const prompt = await this.generatePrompt(todayNotes);
      const summary = await this.callLLM(prompt);
      if (!summary) {
        new import_obsidian.Notice("Failed to generate summary");
        return;
      }
      await this.createDailyReport(targetDate, summary);
      new import_obsidian.Notice("Daily report generated successfully!");
    } catch (error) {
      await this.logError(error, "Fail to generate report");
      console.error("Error generating daily report:", error);
      new import_obsidian.Notice(`Error: ${error.message}`);
    }
  }
  async callLLM(prompt) {
    try {
      if (this.settings.ollamaModel != "") {
        let endpoint = this.settings.apiEndpoint;
        if (endpoint === "") {
          endpoint = "http://localhost:11434";
        }
        const response = await (0, import_obsidian.requestUrl)({
          method: "POST",
          url: `${endpoint}/api/generate`,
          body: JSON.stringify({
            prompt,
            model: this.settings.ollamaModel,
            options: {
              temperature: 0.7
            }
          })
        }).then((response2) => {
          if (response2.status !== 200) {
            throw new Error(`Ollama request failed: ${response2.status}`);
          }
          const steps = response2.text.split("\n").filter((step) => step && step.length > 0).map((step) => JSON.parse(step)).map((step) => step.response).join("").trim();
          return steps;
        });
        return response;
      } else {
        const response = await (0, import_obsidian.requestUrl)({
          url: this.settings.apiEndpoint,
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            "Authorization": `Bearer ${this.settings.apiKey}`
          },
          body: JSON.stringify({
            model: this.settings.openaiModel,
            messages: [
              {
                role: "user",
                content: prompt
              }
            ],
            temperature: 0.7
          })
        });
        if (response.status !== 200) {
          throw new Error(`API request failed: ${response.status}`);
        }
        return response.json.choices?.[0]?.message?.content || "";
      }
    } catch (error) {
      await this.logError(error, "Fail to call LLM API");
      throw new Error(`Fail to call LLM API: ${error.message}`);
    }
  }
  async createDailyReport(date, content) {
    try {
      const year = date.getFullYear();
      const month = String(date.getMonth() + 1).padStart(2, "0");
      const day = String(date.getDate()).padStart(2, "0");
      const dateString = `${year}-${month}-${day}`;
      const fileName = (0, import_obsidian.normalizePath)(`${this.settings.reportLocation}/Daily Report-${dateString}.md`);
      if (await this.app.vault.adapter.exists(fileName)) {
        const existingContent = await this.app.vault.adapter.read(fileName);
        const newContent = `${existingContent}

## updated at ${(/* @__PURE__ */ new Date()).toLocaleTimeString()}

${content}`;
        await this.app.vault.adapter.write(fileName, newContent);
      } else {
        const fileContent = `# ${dateString} report

${content}`;
        await this.app.vault.create(fileName, fileContent);
      }
    } catch (error) {
      console.error("Fail to create/update report file:", error);
      throw new Error(`Fail to create/update file: ${error.message}`);
    }
  }
  getDateFromFileName(fileName) {
    const match = fileName.match(/(\d{4}-\d{2}-\d{2})/);
    if (match == null) {
      throw "FileName is not a date";
    }
    return new Date(match[1]);
  }
  async generatePrompt(notes) {
    try {
      const notesContents = await Promise.all(
        notes.map(async (note) => {
          const content = await this.app.vault.read(note);
          return `${note.name}:
${content}`;
        })
      );
      const allContent = notesContents.join("\n\n");
      return this.settings.promptTemplate.replace("{{notes}}", allContent);
    } catch (error) {
      console.error("Fail to generate prompt:", error);
      throw new Error(`Fail to generate prompt: ${error.message}`);
    }
  }
  async logError(error, context) {
    try {
      const time = (/* @__PURE__ */ new Date()).toISOString();
      const errorLog = `
[${time}] ${context}
Error message: ${error.message}
Stack trace: ${error.stack}
API configuration: 
- endpoint: ${this.settings.apiEndpoint || "Not set"}
- model: ${this.settings.ollamaModel} || 'Not set'}
- apiKey: ${this.settings.apiKey ? "Set" : "Not set"}
-------------------
`;
      const logFile = `${this.settings.reportLocation}/debug-errors.md`;
      let content = errorLog;
      if (await this.app.vault.adapter.exists(logFile)) {
        const existingContent = await this.app.vault.adapter.read(logFile);
        content = existingContent + "\n" + errorLog;
      }
      await this.app.vault.adapter.write(logFile, content);
    } catch (logError) {
      console.error("Fail to write error log:", logError);
    }
  }
};
var DailyDigestSettingTab = class extends import_obsidian.PluginSettingTab {
  plugin;
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("API key").setDesc("Enter your LLM API key").addText((text) => text.setPlaceholder("Enter API key").setValue(this.plugin.settings.apiKey).onChange(async (value) => {
      this.plugin.settings.apiKey = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("API endpoint").setDesc("Enter API endpoint address").addText((text) => text.setPlaceholder("https://api.example.com/v1/chat").setValue(this.plugin.settings.apiEndpoint).onChange(async (value) => {
      this.plugin.settings.apiEndpoint = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Ollama model").setDesc("Exact name of the ollama model to use for prompts. If empty, ChatGPT is used").addText(
      (text) => text.setPlaceholder("llama-3.1-8B").setValue(this.plugin.settings.ollamaModel).onChange(async (value) => {
        this.plugin.settings.ollamaModel = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("OpenAI model").setDesc("Enter the name of the OpenAI model to use").addText((text) => text.setPlaceholder("gpt-4o-mini").setValue(this.plugin.settings.openaiModel).onChange(async (value) => {
      this.plugin.settings.openaiModel = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Report save location").setDesc("Set the folder path to save the report (e.g., /Reports or /Daily)").addText((text) => text.setPlaceholder("/").setValue(this.plugin.settings.reportLocation).onChange(async (value) => {
      this.plugin.settings.reportLocation = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Excluded folders").setDesc("Set the folders to exclude from the report (e.g., /Archive or /Trash)").addText((text) => text.setPlaceholder("/").setValue(this.plugin.settings.excludedFolders.join(",")).onChange(async (value) => {
      this.plugin.settings.excludedFolders = value.split(",");
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Prompt Template").setDesc("Customize your prompt template. Use {{notes}} as placeholder for notes content.").addTextArea((text) => text.setPlaceholder("Please summarize the main content of today's notes:\n\n{{notes}}").setValue(this.plugin.settings.promptTemplate).onChange(async (value) => {
      this.plugin.settings.promptTemplate = value;
      await this.plugin.saveSettings();
    }));
  }
};
var DaysSelectionModal = class extends import_obsidian.Modal {
  daysCallback;
  constructor(app, callback) {
    super(app);
    this.daysCallback = callback;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h3", { text: "Select the number of days to generate the report" });
    const inputEl = contentEl.createEl("input", {
      type: "number",
      value: "1",
      attr: {
        min: "1",
        max: "30"
      }
    });
    const buttonEl = contentEl.createEl("button", {
      text: "Confirm"
    });
    buttonEl.onclick = () => {
      const days = parseInt(inputEl.value);
      if (!isNaN(days) && days > 0) {
        this.daysCallback(days);
        this.close();
      }
    };
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

/* nosourcemap */