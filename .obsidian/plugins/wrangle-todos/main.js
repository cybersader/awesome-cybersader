/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => TodoCapture
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  keyword: "TODO"
};
var TodoCapture = class extends import_obsidian.Plugin {
  async extractTodosFromCurrentNote(editor, view) {
    const keyword = this.settings.keyword || "TODO";
    const patternToMatch = new RegExp("^-?\\s*(\\[\\s?(|)x?\\])?\\s*" + keyword);
    const todoHeading = `## ${keyword}s`;
    if (!editor) {
      console.error("Editor is not defined");
      return;
    }
    const content = editor.getValue();
    const lines = content.split("\n");
    let todos = [];
    let modifiedContent = [];
    let inTodoSection = false;
    let hasTodoSection = false;
    lines.forEach((line) => {
      if (patternToMatch.test(line)) {
        todos.push(line);
      } else if (line.trim() === todoHeading.trim()) {
        inTodoSection = true;
        hasTodoSection = true;
        modifiedContent.push(line);
      } else {
        if (inTodoSection && line.trim() === "") {
        } else if (inTodoSection) {
          inTodoSection = false;
        }
        modifiedContent.push(line);
      }
    });
    if (todos.length > 0) {
      if (!hasTodoSection) {
        modifiedContent.push(todoHeading);
      }
      modifiedContent.push(...todos);
      editor.setValue(modifiedContent.join("\n"));
    }
  }
  async onload() {
    await this.loadSettings();
    this.addCommand({
      id: "todo-wrangler",
      name: "Wrangle Todos",
      editorCallback: (editor, view) => {
        this.extractTodosFromCurrentNote(editor, view);
      }
    });
    this.addSettingTab(new TodoCaptureSettingTab(this.app, this));
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var TodoCaptureSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Keyword").setDesc("Specify the keyword you want to extract (e.g., TODO, DONE, etc.)").addText((text) => text.setPlaceholder("Enter a keyword to wrangle").setValue(this.plugin.settings.keyword).onChange(async (value) => {
      this.plugin.settings.keyword = value;
      await this.plugin.saveSettings();
    }));
  }
};

/* nosourcemap */