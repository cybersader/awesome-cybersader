/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __accessCheck = (obj, member, msg) => {
  if (!member.has(obj))
    throw TypeError("Cannot " + msg);
};
var __privateGet = (obj, member, getter) => {
  __accessCheck(obj, member, "read from private field");
  return getter ? getter.call(obj) : member.get(obj);
};
var __privateAdd = (obj, member, value) => {
  if (member.has(obj))
    throw TypeError("Cannot add the same private member more than once");
  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
};
var __privateSet = (obj, member, value, setter) => {
  __accessCheck(obj, member, "write to private field");
  setter ? setter.call(obj, value) : member.set(obj, value);
  return value;
};
var __privateMethod = (obj, member, method) => {
  __accessCheck(obj, member, "access private method");
  return method;
};

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => main_default
});
module.exports = __toCommonJS(main_exports);

// plugin/plugin.ts
var import_obsidian7 = require("obsidian");

// actions/execute.default.ts
var import_obsidian2 = require("obsidian");

// i18n/de-DE.json
var de_DE_default = {
  "Create a daily note within its folder structure.": "Erzeuge eine 'Daily Note' und ggf. die festgelegte Struktur.",
  "Failed to create file": "Die folgende Datei konnte nicht erzeugt werden:",
  "Failed to create file content": "Eine Datei wurde ohne Inhalt erstellt.",
  "Failed to create folder": "Der folgende Ordner konnte nicht erzeugt werden:",
  "Failed to parse settings property 'structure'": "Das Parsen der in den Plugin-Settings festgelegten Struktur schlug fehl.",
  "Hide obsidians daily notes icon.": "Blendet das Obsidian Standard-Icon aus.",
  "Hide the plugins daily notes icon.": "Blendet das Plugin Icon aus.",
  "Hides obsidians default icon for daily notes.": "Blendet das Icon f\xFCr Obsidians 'daily note' Standard-Plugin aus.",
  "Hides the plugins icon for daily notes.": "Blendet das Icon des 'daily note structure' Plugins aus.",
  "Missing template file": "Das folgende Template fehlt:",
  "Ribbons and Buttons": "Ribbons und Buttons",
  "Settings property 'structure' contains unknown type:": "Die Eigenschaft 'structure' in den Plugin-Einstellungen enth\xE4lt einen unbekannten 'type'.",
  "Settings property 'structure' must be of type 'array'": "Die Eigenschaft 'structure' in den Plugin-Einstellungen muss ein Array enthalten.",
  "Toggle ribbon buttons on and off": "Buttons im Seitenleisten-Men\xFC ein- und ausschalten",
  HOW_TO_TOGGLE_RIBBON_BUTTONS_0: "Seit der Version v1.1.0 von Obsidian, besteht die M\xF6glichkeit das Seitenleisten-Men\xFC mit den Buttons, in den Obsidian 'Einstellungen' anzupassen. Nach dem \xD6ffnen der 'Einstellungen', auf der linken Seite 'Darstellung' ausw\xE4hlen. Danach auf der rechten Seite bis zum Punkt 'Interface' herunter scrollen. Anschlie\xDFend bei 'Seitenleisten-Men\xFC' den Button 'Verwalten' anklicken.",
  HOW_TO_TOGGLE_RIBBON_BUTTONS_1: "Nun kann der Button von Obsidians Standard-App f\xFCr 'daily notes' und der Button f\xFCr die App 'daily folder structure' ein- und ausgeschaltet oder verschoben werden."
};

// i18n/index.ts
var EMPTY = "";
var LANGUAGE = "language";
var DFLTLANG = "en";
var LANGUAGES = {
  "de": de_DE_default
};
function getLocale() {
  return window.localStorage.getItem(LANGUAGE);
}
function getI18NSupport() {
  const lang = getLocale() || EMPTY;
  return LANGUAGES[lang] || {};
}
var I18NSUPPORT = getI18NSupport();
function I18N(key) {
  return I18NSUPPORT[key] || key;
}
function locale(dflt = DFLTLANG) {
  const locale2 = getLocale();
  return locale2 ? locale2 : dflt || DFLTLANG;
}

// log/log.ts
var import_obsidian = require("obsidian");
var PLUGINNAME = "Daily Note Structure:";
function debug(...message) {
  console.debug(PLUGINNAME, ...message);
}
function error(error2, message) {
  if (message) {
    console.error(PLUGINNAME, message, error2);
  } else {
    console.error(PLUGINNAME, error2);
  }
}
function notice(message, e) {
  if (e) {
    error(e, message);
  } else {
    debug(message);
  }
  new import_obsidian.Notice(`${message}${e ? "\n\r" + e.toString() : ""}`);
}

// structure/structure.ts
var FILE = "file";
var FOLDER = "folder";

// actions/execute.default.ts
import_obsidian2.moment.locale(locale());
var DAYS = "days";
var STRINGS = {
  FSLASH: "/",
  MDSUFFIX: ".md"
};
var FORMATKEYS = [
  "M",
  "Mo",
  "MM",
  "MMM",
  "MMMM",
  "Q",
  "Qo",
  "D",
  "Do",
  "DD",
  "DDD",
  "DDDo",
  "DDDD",
  "d",
  "do",
  "dd",
  "ddd",
  "dddd",
  "e",
  "E",
  "w",
  "wo",
  "ww",
  "W",
  "Wo",
  "WW",
  "Y",
  "YY",
  "YYYY",
  "YYYYYY",
  "y",
  "N",
  "NN",
  "NNN",
  "NNNN",
  "NNNNN",
  "gg",
  "gggg",
  "GG",
  "GGGG",
  "A",
  "a",
  "H",
  "HH",
  "h",
  "hh",
  "k",
  "kk",
  "m",
  "mm",
  "s",
  "ss",
  "S",
  "SS",
  "SSS",
  "SSSS",
  "SSSSS",
  "SSSSSS",
  "z",
  "zz",
  "Z",
  "ZZ",
  "x",
  "X"
];
var SPECIALWEEKKEYS = ["MOW", "MoW", "MMOW", "MMMOW", "MMMMOW"];
var SPECIALWEEKMAP = {
  MOW: "M",
  MoW: "Mo",
  MMOW: "MM",
  MMMOW: "MMM",
  MMMMOW: "MMMM"
};
var reg = new RegExp("{{(\\w+)}}", "gm");
function resolved(amoment, patterns2) {
  patterns2.forEach((pattern) => {
    if (FORMATKEYS.contains(pattern.format)) {
      pattern.resolved = amoment.format(pattern.format);
    } else if (SPECIALWEEKKEYS.contains(pattern.format)) {
      const cday = amoment.day();
      const delta = cday < 1 ? 6 : cday - 1;
      const frstday = (0, import_obsidian2.moment)(amoment).add(-1 * delta, DAYS);
      const format = SPECIALWEEKMAP[pattern.format];
      pattern.resolved = frstday.format(format);
    }
  });
}
function patterns(namepattern) {
  reg.lastIndex = 0;
  let match = void 0;
  const retval = [];
  while ((match = reg.exec(namepattern)) !== null) {
    retval.push({ key: match[0], format: match[1] });
  }
  return retval;
}
function resolve(namepattern, amoment) {
  const pttrns = patterns(namepattern);
  resolved(amoment ? amoment : (0, import_obsidian2.moment)(), pttrns);
  pttrns.forEach((pattern) => {
    const rplce = pattern.resolved ? pattern.resolved : pattern.key;
    namepattern = namepattern.replace(pattern.key, rplce);
  });
  return namepattern;
}
async function createFolderImpl(app, parents, foldername) {
  const returnvalue = [...parents, foldername];
  const folderpath = (0, import_obsidian2.normalizePath)(returnvalue.join(STRINGS.FSLASH));
  const folder = app.vault.getFolderByPath(folderpath);
  if (folder) {
    return Promise.resolve(returnvalue);
  } else {
    return app.vault.createFolder(folderpath).then(() => {
      return returnvalue;
    });
  }
}
async function createFileImpl(app, parents, filename, filedata = "") {
  const filepatharr = [...parents, filename];
  const filepath = (0, import_obsidian2.normalizePath)(filepatharr.join(STRINGS.FSLASH));
  const file = app.vault.getFileByPath(filepath);
  if (file) {
    return Promise.resolve(file);
  } else {
    return app.vault.create(filepath, filedata);
  }
}
function createFolderStructure(app, node) {
  return { type: FILE, namepattern: node.namepattern + STRINGS.MDSUFFIX, template: node.template };
}
async function createFileData(app, node) {
  if (!node.template) {
    return Promise.resolve(void 0);
  } else {
    const file = this.app.vault.getAbstractFileByPath(node.template);
    if (!(file instanceof import_obsidian2.TFile)) {
      const error2 = new Error(`${I18N("Missing template file")} '${node.template}'`);
      notice(I18N("Failed to create file content"), error2);
      return Promise.resolve(void 0);
    } else {
      return this.app.vault.read(file);
    }
  }
}
async function createFolder(app, parents, node) {
  const foldername = resolve(node.namepattern);
  const newparents = await createFolderImpl(app, parents, foldername).then(void 0, (error2) => {
    error(error2, I18N("Failed to create folder") + ` '${foldername}'`);
    return void 0;
  });
  if (newparents && node.template) {
    createFile(app, newparents, createFolderStructure(app, node));
  }
  if (newparents && node.children) {
    build(app, newparents, node.children);
  }
}
async function createFile(app, parents, node) {
  const filename = resolve(node.namepattern);
  const template = await createFileData(app, node);
  const file = await createFileImpl(app, parents, filename, template).then(void 0, (error2) => {
    error(error2, I18N("Failed to create file") + ` '${filename}'.`);
    return void 0;
  });
  return file;
}
function build(app, parents, structure) {
  structure.forEach((node) => {
    if (node.type === FILE) {
      createFile(app, parents, node);
    } else if (node.type === FOLDER) {
      createFolder(app, parents, node);
    } else {
      notice(`${I18N("Settings property 'structure' contains unknown type:")} '${node.type}'`);
    }
  });
}
function parseStructure(structure) {
  let obj = void 0;
  try {
    obj = JSON.parse(structure);
  } catch (error2) {
    notice(I18N("Failed to parse settings property 'structure'"), error2);
  }
  if (!Array.isArray(obj)) {
    notice(I18N("Settings property 'structure' must be of type 'array'"));
    return [];
  } else
    return obj;
}
function executeDefault(app, settings) {
  const structure = parseStructure(settings.structure);
  if (!structure) {
    return;
  } else {
    build(app, [], structure);
  }
}

// css/css.ts
var CSSCLS = Object.freeze(Object.seal({
  BODY: "body",
  CLASSNAME: "classname",
  CODE: "code",
  CODEBLOCK: "codeblock",
  DECLARATION: "declaration",
  DESCRIPTION: "description",
  ERROR: "error",
  FOOTER: "footer",
  H1: "h1",
  HEADER: "header",
  KEY: "key",
  KEYWORD: "keyword",
  OPERATOR: "operator",
  SMALL: "small",
  STRING: "string",
  TOKEN: "token",
  TYPE: "type",
  PLG_SETTINGS_ACTION_BTN: "dly-nt-strct-action-ribbon-class",
  PLG_SETTINGS_ACTIVE_TAB: "dly-nt-strct-settings-active-tab",
  PLG_SETTINGS_CONTROL: "dly-nt-strct-settings-control",
  PLG_SETTINGS_PAGE: "dly-nt-strct-settings-page",
  PLG_SETTINGS_TAB: "dly-nt-strct-settings-tab",
  PLG_SETTINGS_TAB_BAR: "dly-nt-strct-settings-tab-bar",
  PLG_SETTINGS_TAB_NAME: "dly-nt-strct-settings-tab-name",
  PLG_SETTINGS_TEXT: "dly-nt-strct-settings-text",
  PLG_SETTINGS_STRUCTURE: "dly-nt-strct-settings-structure"
}));

// utils/svg.ts
var SVG = "svg";
var DEFAULT_SETTINGS = {
  "xmlns": "http://www.w3.org/2000/svg",
  "width": "24",
  "height": "24",
  "viewBox": "0 0 24 24",
  "fill": "none",
  "stroke": "currentColor",
  "stroke-width": "2",
  "stroke-linecap": "round",
  "stroke-linejoin": "round"
};
function setDefaultSVGAttributes(element) {
  for (const pname in DEFAULT_SETTINGS) {
    element.setAttribute(pname, DEFAULT_SETTINGS[pname]);
  }
  return element;
}

// settings/plugin.ts
var DEFAULT_SETTINGS2 = {
  hideClassicDailiesIcon: false,
  hidePluginsDailiesIcon: false,
  structure: "",
  tabid: "general"
};
var SettingSubTabs = /* @__PURE__ */ ((SettingSubTabs2) => {
  SettingSubTabs2["General"] = "general";
  SettingSubTabs2["Ribbons"] = "ribbons";
  return SettingSubTabs2;
})(SettingSubTabs || {});

// plugin/abstract.ts
var import_obsidian3 = require("obsidian");
var AbstractDailyNoteStructurePlugin = class extends import_obsidian3.Plugin {
};

// plugin/settings.ts
var import_obsidian6 = require("obsidian");

// html/html.ts
var BR = "br";
var DIV = "div";
var NAV = "nav";
var SPAN = "span";

// plugin/tabs/general.ts
var import_obsidian4 = require("obsidian");
function render(plugin, containerEl) {
  const descriptn = document.createDocumentFragment();
  descriptn.append(
    descriptn.createEl(DIV, void 0, (div) => {
      div.addClass(CSSCLS.DESCRIPTION);
      div.append(I18N("Insert a json description of the 'daily notes structure'"));
      div.append(descriptn.createEl(BR));
    }),
    descriptn.createEl(DIV, void 0, (div) => {
      div.addClass(CSSCLS.DECLARATION);
      div.append(
        div.createEl(DIV, void 0, (div2) => {
          div2.addClass(CSSCLS.HEADER);
          div2.append(
            div2.createEl(SPAN, void 0, (span) => {
              span.addClass(CSSCLS.KEYWORD);
              span.append("interface");
            }),
            div2.createEl(SPAN, void 0, (span) => {
              span.addClass(CSSCLS.CLASSNAME);
              span.append(" FolderStructure ");
            }),
            div2.createEl(SPAN, void 0, (span) => {
              span.addClass(CSSCLS.CODEBLOCK);
              span.append("{");
            })
          );
        }),
        div.createEl(DIV, void 0, (div2) => {
          div2.addClass(CSSCLS.BODY);
          div2.append(
            div2.createEl(DIV, void 0, (div3) => {
              div3.addClass(CSSCLS.CODE);
              div3.append(
                div3.createEl(SPAN, void 0, (span) => {
                  span.addClass(CSSCLS.KEY);
                  span.append("type");
                }),
                div3.createEl(SPAN, void 0, (span) => {
                  span.addClass(CSSCLS.OPERATOR);
                  span.append(": ");
                }),
                div3.createEl(SPAN, void 0, (span) => {
                  span.addClass(CSSCLS.STRING);
                  span.append('"file"');
                }),
                div3.createEl(SPAN, void 0, (span) => {
                  span.addClass(CSSCLS.OPERATOR);
                  span.append(" | ");
                }),
                div3.createEl(SPAN, void 0, (span) => {
                  span.addClass(CSSCLS.STRING);
                  span.append('"folder"');
                }),
                div3.createEl(SPAN, void 0, (span) => {
                  span.addClass(CSSCLS.TOKEN);
                  span.append(";");
                })
              );
            }),
            div2.createEl(DIV, void 0, (div3) => {
              div3.addClass(CSSCLS.CODE);
              div3.append(
                div3.createEl(SPAN, void 0, (span) => {
                  span.addClass(CSSCLS.KEY);
                  span.append("namepattern");
                }),
                div3.createEl(SPAN, void 0, (span) => {
                  span.addClass(CSSCLS.OPERATOR);
                  span.append(": ");
                }),
                div3.createEl(SPAN, void 0, (span) => {
                  span.addClass(CSSCLS.TYPE);
                  span.append("string");
                }),
                div3.createEl(SPAN, void 0, (span) => {
                  span.addClass(CSSCLS.TOKEN);
                  span.append(";");
                })
              );
            }),
            div2.createEl(DIV, void 0, (div3) => {
              div3.addClass(CSSCLS.CODE);
              div3.append(
                div3.createEl(SPAN, void 0, (span) => {
                  span.addClass(CSSCLS.KEY);
                  span.append("template");
                }),
                div3.createEl(SPAN, void 0, (span) => {
                  span.addClass(CSSCLS.OPERATOR);
                  span.append("?: ");
                }),
                div3.createEl(SPAN, void 0, (span) => {
                  span.addClass(CSSCLS.TYPE);
                  span.append("string");
                }),
                div3.createEl(SPAN, void 0, (span) => {
                  span.addClass(CSSCLS.TOKEN);
                  span.append(";");
                })
              );
            }),
            div2.createEl(DIV, void 0, (div3) => {
              div3.addClass(CSSCLS.CODE);
              div3.append(
                div3.createEl(SPAN, void 0, (span) => {
                  span.addClass(CSSCLS.KEY);
                  span.append("description");
                }),
                div3.createEl(SPAN, void 0, (span) => {
                  span.addClass(CSSCLS.OPERATOR);
                  span.append("?: ");
                }),
                div3.createEl(SPAN, void 0, (span) => {
                  span.addClass(CSSCLS.TYPE);
                  span.append("string");
                }),
                div3.createEl(SPAN, void 0, (span) => {
                  span.addClass(CSSCLS.TOKEN);
                  span.append(";");
                })
              );
            }),
            div2.createEl(DIV, void 0, (div3) => {
              div3.addClass(CSSCLS.CODE);
              div3.append(
                div3.createEl(SPAN, void 0, (span) => {
                  span.addClass(CSSCLS.KEY);
                  span.append("children");
                }),
                div3.createEl(SPAN, void 0, (span) => {
                  span.addClass(CSSCLS.OPERATOR);
                  span.append("?: ");
                }),
                div3.createEl(SPAN, void 0, (span) => {
                  span.addClass(CSSCLS.CLASSNAME);
                  span.append("FolderStructure");
                }),
                div3.createEl(SPAN, void 0, (span) => {
                  span.addClass(CSSCLS.OPERATOR);
                  span.append("[]");
                }),
                div3.createEl(SPAN, void 0, (span) => {
                  span.addClass(CSSCLS.TOKEN);
                  span.append(";");
                })
              );
            })
          );
        }),
        div.createEl(DIV, void 0, (div2) => {
          div2.addClass(CSSCLS.FOOTER);
          div2.append(
            div2.createEl(SPAN, void 0, (span) => {
              span.addClass(CSSCLS.CODEBLOCK);
              span.append("}");
            })
          );
        })
      );
    }),
    descriptn.createEl(DIV, void 0, (div) => {
      div.addClass(CSSCLS.DESCRIPTION);
      div.append(I18N("This translates to JSON folder and JSON file descriptions as follows"));
    }),
    descriptn.createEl(DIV, void 0, (div) => {
      div.addClass(CSSCLS.DECLARATION);
      div.append(
        div.createEl(DIV, void 0, (div2) => {
          div2.addClass(CSSCLS.HEADER);
          div2.append(
            div2.createEl(SPAN, void 0, (span) => {
              span.addClass(CSSCLS.CODEBLOCK);
              span.append("{");
            })
          );
        }),
        div.createEl(DIV, void 0, (div2) => {
          div2.addClass(CSSCLS.BODY);
          div2.append(
            div2.createEl(DIV, void 0, (div3) => {
              div3.addClass(CSSCLS.CODE);
              div3.append(
                div3.createEl(SPAN, void 0, (span) => {
                  span.addClass(CSSCLS.STRING);
                  span.append('"type"');
                }),
                div3.createEl(SPAN, void 0, (span) => {
                  span.addClass(CSSCLS.OPERATOR);
                  span.append(": ");
                }),
                div3.createEl(SPAN, void 0, (span) => {
                  span.addClass(CSSCLS.STRING);
                  span.append('"folder"');
                }),
                div3.createEl(SPAN, void 0, (span) => {
                  span.addClass(CSSCLS.TOKEN);
                  span.append(",");
                })
              );
            }),
            div2.createEl(DIV, void 0, (div3) => {
              div3.addClass(CSSCLS.CODE);
              div3.append(
                div3.createEl(SPAN, void 0, (span) => {
                  span.addClass(CSSCLS.STRING);
                  span.append('"namepattern"');
                }),
                div3.createEl(SPAN, void 0, (span) => {
                  span.addClass(CSSCLS.OPERATOR);
                  span.append(": ");
                }),
                div3.createEl(SPAN, void 0, (span) => {
                  span.addClass(CSSCLS.STRING);
                  span.append('"{{YYYY}}"');
                }),
                div3.createEl(SPAN, void 0, (span) => {
                  span.addClass(CSSCLS.TOKEN);
                  span.append(",");
                })
              );
            }),
            div2.createEl(DIV, void 0, (div3) => {
              div3.addClass(CSSCLS.CODE);
              div3.append(
                div3.createEl(SPAN, void 0, (span) => {
                  span.addClass(CSSCLS.STRING);
                  span.append('"template"');
                }),
                div3.createEl(SPAN, void 0, (span) => {
                  span.addClass(CSSCLS.OPERATOR);
                  span.append(": ");
                }),
                div3.createEl(SPAN, void 0, (span) => {
                  span.addClass(CSSCLS.STRING);
                  span.append('"Path/to/Template/folder_note_template.md"');
                }),
                div3.createEl(SPAN, void 0, (span) => {
                  span.addClass(CSSCLS.TOKEN);
                  span.append(",");
                })
              );
            }),
            div2.createEl(DIV, void 0, (div3) => {
              div3.addClass(CSSCLS.CODE);
              div3.append(
                div3.createEl(SPAN, void 0, (span) => {
                  span.addClass(CSSCLS.STRING);
                  span.append('"children"');
                }),
                div3.createEl(SPAN, void 0, (span) => {
                  span.addClass(CSSCLS.OPERATOR);
                  span.append(": ");
                }),
                div3.createEl(SPAN, void 0, (span) => {
                  span.addClass(CSSCLS.OPERATOR);
                  span.append("[");
                }),
                div3.createEl(SPAN, void 0, (span) => {
                  span.addClass(CSSCLS.CLASSNAME);
                  span.append(" ... any number of further JSON file or folder object literals ... ");
                }),
                div3.createEl(SPAN, void 0, (span) => {
                  span.addClass(CSSCLS.OPERATOR);
                  span.append("]");
                }),
                div3.createEl(SPAN, void 0, (span) => {
                  span.addClass(CSSCLS.TOKEN);
                  span.append(",");
                })
              );
            })
          );
        }),
        div.createEl(DIV, void 0, (div2) => {
          div2.addClass(CSSCLS.FOOTER);
          div2.append(
            div2.createEl(SPAN, void 0, (span) => {
              span.addClass(CSSCLS.CODEBLOCK);
              span.append("}");
            })
          );
        })
      );
    }),
    descriptn.createEl(BR),
    descriptn.createEl(DIV, void 0, (div) => {
      div.addClass(CSSCLS.DECLARATION);
      div.append(
        div.createEl(DIV, void 0, (div2) => {
          div2.addClass(CSSCLS.HEADER);
          div2.append(
            div2.createEl(SPAN, void 0, (span) => {
              span.addClass(CSSCLS.CODEBLOCK);
              span.append("{");
            })
          );
        }),
        div.createEl(DIV, void 0, (div2) => {
          div2.addClass(CSSCLS.BODY);
          div2.append(
            div2.createEl(DIV, void 0, (div3) => {
              div3.addClass(CSSCLS.CODE);
              div3.append(
                div3.createEl(SPAN, void 0, (span) => {
                  span.addClass(CSSCLS.STRING);
                  span.append('"type"');
                }),
                div3.createEl(SPAN, void 0, (span) => {
                  span.addClass(CSSCLS.OPERATOR);
                  span.append(": ");
                }),
                div3.createEl(SPAN, void 0, (span) => {
                  span.addClass(CSSCLS.STRING);
                  span.append('"file"');
                }),
                div3.createEl(SPAN, void 0, (span) => {
                  span.addClass(CSSCLS.TOKEN);
                  span.append(",");
                })
              );
            }),
            div2.createEl(DIV, void 0, (div3) => {
              div3.addClass(CSSCLS.CODE);
              div3.append(
                div3.createEl(SPAN, void 0, (span) => {
                  span.addClass(CSSCLS.STRING);
                  span.append('"namepattern"');
                }),
                div3.createEl(SPAN, void 0, (span) => {
                  span.addClass(CSSCLS.OPERATOR);
                  span.append(": ");
                }),
                div3.createEl(SPAN, void 0, (span) => {
                  span.addClass(CSSCLS.STRING);
                  span.append('"{{YYYY}}-{{MM}}-{{DD}}');
                }),
                div3.createEl(SPAN, void 0, (span) => {
                  span.setAttribute("style", "color: red");
                  span.append(".md");
                }),
                div3.createEl(SPAN, void 0, (span) => {
                  span.addClass(CSSCLS.STRING);
                  span.append('"');
                }),
                div3.createEl(SPAN, void 0, (span) => {
                  span.addClass(CSSCLS.TOKEN);
                  span.append(",");
                })
              );
            }),
            div2.createEl(DIV, void 0, (div3) => {
              div3.addClass(CSSCLS.CODE);
              div3.append(
                div3.createEl(SPAN, void 0, (span) => {
                  span.addClass(CSSCLS.STRING);
                  span.append('"template"');
                }),
                div3.createEl(SPAN, void 0, (span) => {
                  span.addClass(CSSCLS.OPERATOR);
                  span.append(": ");
                }),
                div3.createEl(SPAN, void 0, (span) => {
                  span.addClass(CSSCLS.STRING);
                  span.append('"Path/to/Template/file_daily_template.md"');
                }),
                div3.createEl(SPAN, void 0, (span) => {
                  span.addClass(CSSCLS.TOKEN);
                  span.append(",");
                })
              );
            })
          );
        }),
        div.createEl(DIV, void 0, (div2) => {
          div2.addClass(CSSCLS.FOOTER);
          div2.append(
            div2.createEl(SPAN, void 0, (span) => {
              span.addClass(CSSCLS.CODEBLOCK);
              span.append("}");
            })
          );
        })
      );
    }),
    descriptn.createEl(DIV, void 0, (div) => {
      div.addClass(CSSCLS.DESCRIPTION);
      div.append(I18N("Because the JSON structure starts with 'children' of the root folder, the JSON root element must be an Array."));
    })
  );
  const settingEl = new import_obsidian4.Setting(containerEl);
  settingEl.setClass(CSSCLS.PLG_SETTINGS_TEXT);
  settingEl.setName(I18N("Daily Notes Structure")).setDesc(descriptn);
  const strctreEl = new import_obsidian4.Setting(containerEl);
  strctreEl.addTextArea((area) => {
    area.inputEl.setAttribute("rows", "20");
    area.inputEl.setAttribute("cols", "60");
    area.setValue(plugin.settings.structure).onChange((value) => {
      try {
        JSON.parse(value);
        strctreEl.settingEl.classList.remove(CSSCLS.ERROR);
      } catch (e) {
        strctreEl.settingEl.classList.add(CSSCLS.ERROR);
      } finally {
        plugin.settings.structure = value;
        plugin.saveData(plugin.settings);
      }
    });
  });
  try {
    JSON.parse(plugin.settings.structure);
    strctreEl.settingEl.classList.add(CSSCLS.PLG_SETTINGS_STRUCTURE);
  } catch (error2) {
    strctreEl.settingEl.classList.add(CSSCLS.PLG_SETTINGS_STRUCTURE);
    strctreEl.settingEl.classList.add(CSSCLS.ERROR);
  }
}

// plugin/tabs/ribbon.ts
var import_obsidian5 = require("obsidian");
var RIBBONS_AND_BUTTONS = "Ribbons and Buttons";
var HOW_TO_TOGGLE_RIBBON_BUTTONS_0 = "HOW_TO_TOGGLE_RIBBON_BUTTONS_0";
var HOW_TO_TOGGLE_RIBBON_BUTTONS_0_DFLT = `
As of v1.1.0 of Obsidian, the Obsidians ribbon can be customized via Obsidians 'settings'. 
On the left side select 'Appearence', then scroll on the right side, down to 'Interface'. 
Find 'Ribbon menu configuration' and click on the button 'manage'.
`;
var HOW_TO_TOGGLE_RIBBON_BUTTONS_1 = "HOW_TO_TOGGLE_RIBBON_BUTTONS_1";
var HOW_TO_TOGGLE_RIBBON_BUTTONS_1_DFLT = `
This is the place where Obsidians button for its default app 'daily notes' and the 
plugins button for creating a 'daily folder structure' can be toggled on or off.
`;
function render2(containerEl) {
  const descriptn = document.createDocumentFragment();
  descriptn.append(
    descriptn.createEl(DIV, void 0, (div) => {
      div.addClass(CSSCLS.DESCRIPTION);
      div.addClass(CSSCLS.SMALL);
      let translation = I18N(HOW_TO_TOGGLE_RIBBON_BUTTONS_0);
      if (translation === HOW_TO_TOGGLE_RIBBON_BUTTONS_0) {
        translation = HOW_TO_TOGGLE_RIBBON_BUTTONS_0_DFLT;
      }
      div.append(translation);
      div.append(descriptn.createEl(BR));
      translation = I18N(HOW_TO_TOGGLE_RIBBON_BUTTONS_1);
      if (translation === HOW_TO_TOGGLE_RIBBON_BUTTONS_1) {
        translation = HOW_TO_TOGGLE_RIBBON_BUTTONS_1_DFLT;
      }
      div.append(translation);
    })
  );
  const settingE1 = new import_obsidian5.Setting(containerEl);
  settingE1.setClass(CSSCLS.PLG_SETTINGS_TEXT);
  settingE1.nameEl.addClass(CSSCLS.H1);
  settingE1.setName(I18N(RIBBONS_AND_BUTTONS));
  const settingE2 = new import_obsidian5.Setting(containerEl);
  settingE2.setClass(CSSCLS.PLG_SETTINGS_CONTROL);
  settingE2.setName(I18N("Toggle ribbon buttons on and off")).setDesc(descriptn);
}

// plugin/tabs/index.ts
function renderTab(plugin, containerEl) {
  switch (plugin.settings.tabid.toLocaleLowerCase()) {
    case "ribbons" /* Ribbons */:
      render2(containerEl);
      break;
    case "general" /* General */:
    default:
      render(plugin, containerEl);
  }
}

// plugin/settings.ts
var _plugin, _tab;
var DailyNoteStructurePluginTab = class extends import_obsidian6.PluginSettingTab {
  /**
   *  Constructor of DailyNoteStructurePluginTab
   * 
   *  @param {App}                      app 
   *  @param {DailyNoteStructurePlugin} plugin 
   */
  constructor(app, plugin) {
    super(app, plugin);
    /* Back-reference to enable accessing the plugin*/
    __privateAdd(this, _plugin, void 0);
    /* HTML container element for displaying content, depending on the selected tab */
    __privateAdd(this, _tab, void 0);
    __privateSet(this, _plugin, plugin);
  }
  /**
   *  Called to display the setting tab GUI
   */
  display() {
    const { containerEl } = this;
    containerEl.empty();
    const tabBar = containerEl.createEl(NAV, { cls: CSSCLS.PLG_SETTINGS_TAB_BAR });
    for (const tabId in SettingSubTabs) {
      const tabElem = tabBar.createEl(DIV, { cls: CSSCLS.PLG_SETTINGS_TAB });
      tabElem.createEl(DIV, { cls: CSSCLS.PLG_SETTINGS_TAB_NAME, text: I18N(tabId) });
      if (__privateGet(this, _plugin).settings.tabid.toLocaleLowerCase() === tabId.toLocaleLowerCase()) {
        tabElem.addClass(CSSCLS.PLG_SETTINGS_ACTIVE_TAB);
      }
      tabElem.addEventListener("click", () => {
        __privateGet(this, _plugin).settings.tabid = tabId.toLocaleLowerCase();
        __privateGet(this, _plugin).saveData(__privateGet(this, _plugin).settings);
        for (const tabEl of tabBar.children) {
          tabEl.removeClass(CSSCLS.PLG_SETTINGS_ACTIVE_TAB);
        }
        tabElem.addClass(CSSCLS.PLG_SETTINGS_ACTIVE_TAB);
        __privateGet(this, _tab).empty();
        renderTab(__privateGet(this, _plugin), __privateGet(this, _tab));
      });
    }
    __privateSet(this, _tab, containerEl.createDiv({ cls: CSSCLS.PLG_SETTINGS_PAGE }));
    __privateGet(this, _tab).empty();
    renderTab(__privateGet(this, _plugin), __privateGet(this, _tab));
  }
};
_plugin = new WeakMap();
_tab = new WeakMap();

// plugin/plugin.ts
var CALENDARFOLDSVG = (() => {
  let data = '<path d="M8 2v4"/><path d="M16 2v4"/>';
  data += '<path d="M21 17V6a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h11Z"/>';
  data += '<path d="M3 10h18"/><path d="M15 22v-4a2 2 0 0 1 2-2h4"/>';
  return data;
})();
var _ribbonName, _ribbonElement, _settings, _addRibbons, addRibbons_fn;
var _DailyNoteStructurePlugin = class extends AbstractDailyNoteStructurePlugin {
  constructor() {
    super(...arguments);
    /**
     *  Adds the plugins ribbon(s) to obsidians GUI
     */
    __privateAdd(this, _addRibbons);
    /* Left side ribbon action icon */
    __privateAdd(this, _ribbonElement, void 0);
    /* Plugin settings */
    __privateAdd(this, _settings, void 0);
  }
  /**
   *  Return the plugins action button
   */
  get ribbonElement() {
    return __privateGet(this, _ribbonElement);
  }
  /**
   *  Returns the plugins internal settings.
   */
  get settings() {
    return __privateGet(this, _settings);
  }
  /**
   *  Simply load the plugins settings file (data.json) and make it available.
   */
  async loadSettings() {
    __privateSet(this, _settings, Object.assign({}, DEFAULT_SETTINGS2, await this.loadData()));
  }
  /**
   *  Called when the data.json file is modified on disk externally from Obsidian.
   *  This usually means that a Sync service or external program has modified the plugin settings.
   */
  async onExternalSettingsChange() {
    await this.loadSettings();
  }
  /**
   *  Called on plugin activation and on any obsidian start with activated plugin.
   */
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new DailyNoteStructurePluginTab(this.app, this));
    __privateMethod(this, _addRibbons, addRibbons_fn).call(this);
  }
  /**
   *  Called upon unloading the plugin
   */
  onunload() {
  }
};
var DailyNoteStructurePlugin = _DailyNoteStructurePlugin;
_ribbonName = new WeakMap();
_ribbonElement = new WeakMap();
_settings = new WeakMap();
_addRibbons = new WeakSet();
addRibbons_fn = function() {
  (0, import_obsidian7.addIcon)(__privateGet(_DailyNoteStructurePlugin, _ribbonName), CALENDARFOLDSVG);
  const tooltip = I18N("Create a daily note within its folder structure.");
  __privateSet(this, _ribbonElement, this.addRibbonIcon(__privateGet(_DailyNoteStructurePlugin, _ribbonName), tooltip, (evt) => {
    executeDefault(this.app, this.settings);
  }));
  __privateGet(this, _ribbonElement).addClass(CSSCLS.PLG_SETTINGS_ACTION_BTN);
  const elements = __privateGet(this, _ribbonElement).getElementsByTagName(SVG);
  for (let i = 0; i < elements.length; ++i) {
    setDefaultSVGAttributes(elements[i]);
  }
};
/* Identifier of the ribbon icon */
__privateAdd(DailyNoteStructurePlugin, _ribbonName, "calendar-fold");

// main.ts
var main_default = DailyNoteStructurePlugin;


/* nosourcemap */