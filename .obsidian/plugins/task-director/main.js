/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var h=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var T=Object.getOwnPropertyNames;var k=Object.prototype.hasOwnProperty;var v=(l,i)=>{for(var e in i)h(l,e,{get:i[e],enumerable:!0})},w=(l,i,e,t)=>{if(i&&typeof i=="object"||typeof i=="function")for(let s of T(i))!k.call(l,s)&&s!==e&&h(l,s,{get:()=>i[s],enumerable:!(t=u(i,s))||t.enumerable});return l};var C=l=>w(h({},"__esModule",{value:!0}),l);var b={};v(b,{default:()=>d});module.exports=C(b);var o=require("obsidian"),f={removeCompletedDate:!0},d=class extends o.Plugin{async onload(){await this.loadSettings(),console.log("Batch Task Toggle plugin loaded"),this.addSettingTab(new g(this.app,this)),this.addCommand({id:"change-to-done",name:"Change tasks to done",checkCallback:e=>{let t=this.app.workspace.getActiveFile();return t?(e||this.toggleTasksInFile(t,!0),!0):(new o.Notice("No file is currently active"),!1)}}),this.addCommand({id:"change-to-not-done",name:"Change tasks to todo",checkCallback:e=>{let t=this.app.workspace.getActiveFile();return t?(e||this.toggleTasksInFile(t,!1),!0):(new o.Notice("No file is currently active"),!1)}}),this.addCommand({id:"show-todo-summary",name:"Show page todo summary",checkCallback:e=>{let t=this.app.workspace.getActiveFile();return t?(e||this.showTodoCountsInCurrentFile(t),!0):(new o.Notice("No file is currently active"),!1)}}),this.registerEvent(this.app.workspace.on("file-menu",(e,t)=>{t instanceof o.TFile&&t.extension==="md"&&(e.addItem(s=>{s.setTitle("Todo -> Done").setIcon("list-checks").onClick(()=>this.toggleTasksInFile(t,!0))}),e.addItem(s=>{s.setTitle("Done -> Todo").setIcon("layout-list").onClick(()=>this.toggleTasksInFile(t,!1))}),e.addItem(s=>{s.setTitle("Todo summary").setIcon("info").onClick(()=>this.showTodoCounts(t))}))}))}async toggleTasksInFile(e,t){let s=await this.app.vault.read(e),a=0,n=s;if(t?n=s.replace(/- \[ \]/g,()=>(a++,"- [x]")):this.settings.removeCompletedDate?(n=this.removeCompletedDate(s),a=(s.match(/- \[x\]/g)||[]).length):n=s.replace(/- \[x\]/g,()=>(a++,"- [ ]")),s!==n){await this.app.vault.process(e,m=>n);let c=t?"completed":"incomplete";new o.Notice(`All tasks in "${e.name}" marked as ${c}! Total tasks changed: ${a}.`)}else new o.Notice(`No tasks to update in "${e.name}".`)}removeCompletedDate(e){let t=e.replace(/- \[x\]/g,"- [ ]");return t=t.replace(/ ?✅ \d{4}-\d{2}-\d{2}/g,""),t}async showTodoCounts(e){let t=await this.app.vault.read(e),s=(t.match(/- \[ \] |- \[x\] /g)||[]).length,a=(t.match(/- \[ \] /g)||[]).length,n=(t.match(/- \[x\] /g)||[]).length;new r(this.app,e,s,a,n).open()}async showTodoCountsInCurrentFile(e){let t=await this.app.vault.read(e),s=(t.match(/- \[ \] |- \[x\] /g)||[]).length,a=(t.match(/- \[ \] /g)||[]).length,n=(t.match(/- \[x\] /g)||[]).length;new r(this.app,e,s,a,n).open()}async markAllTasksInCurrentFile(e){let t=this.app.workspace.getActiveFile();if(!t){new o.Notice("No file is currently active");return}let s=await this.app.vault.read(t),a=0,n=s;if(e?(a=(s.match(/- \[ \] /g)||[]).length,n=s.replace(/- \[ \] /g,"- [x] ")):this.settings.removeCompletedDate?(n=s.split(`
`).map(p=>p.includes("- [x]")?p.replace(/- \[x\](.*?)\s+✅.*$/,"- [ ] $1").trim():p).join(`
`),a=(s.match(/- \[x\] /g)||[]).length):(a=(s.match(/- \[x\] /g)||[]).length,n=s.replace(/- \[x\] /g,"- [ ] ")),s!==n){await this.app.vault.modify(t,n);let c=e?"done":"not done";new o.Notice(`All tasks in "${t.name}" marked as ${c}! Total tasks changed: ${a}`)}else new o.Notice(`No tasks to update in "${t.name}"`)}async loadSettings(){this.settings=Object.assign({},f,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}onunload(){console.log("Batch Task Toggle plugin unloaded")}},g=class extends o.PluginSettingTab{constructor(e,t){super(e,t);this.plugin=t}display(){let{containerEl:e}=this;e.empty(),new o.Setting(e).setName("Remove completed date").setDesc("Remove the date(for Task plugin: \u2705 2024-11-04) from completed tasks when toggled. ").addToggle(t=>t.setValue(this.plugin.settings.removeCompletedDate).onChange(async s=>{this.plugin.settings.removeCompletedDate=s,await this.plugin.saveSettings()}))}},r=class extends o.Modal{constructor(e,t,s,a,n){super(e);this.file=t,this.totalTodos=s,this.incompleteTodos=a,this.completeTodos=n}onOpen(){let{contentEl:e}=this;e.createEl("h2",{text:"Page task statistics"}),e.createEl("p",{text:`File: ${this.file.name}`,cls:"todo-stats-filename"});let t=e.createEl("table",{cls:"todo-stats-table"});e.addClass("todo-stats-modal"),this.addTableRow(t,"Total tasks",this.totalTodos),this.addTableRow(t,"Completed",this.completeTodos),this.addTableRow(t,"Incomplete",this.incompleteTodos);let s=this.totalTodos>0?(this.completeTodos/this.totalTodos*100).toFixed(1):0;e.createEl("p",{text:`Completion rate: ${s}%`,cls:"completion-rate"})}addTableRow(e,t,s){let a=e.createEl("tr");a.createEl("td",{text:t}),a.createEl("td",{text:s.toString()})}onClose(){let{contentEl:e}=this;e.empty()}};

/* nosourcemap */