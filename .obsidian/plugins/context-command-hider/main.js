/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin: undefined
*/

var __defProp=Object.defineProperty;var __getOwnPropDesc=Object.getOwnPropertyDescriptor;var __getOwnPropNames=Object.getOwnPropertyNames;var __hasOwnProp=Object.prototype.hasOwnProperty;var __export=(target,all)=>{for(var name in all)__defProp(target,name,{get:all[name],enumerable:!0})},__copyProps=(to,from,except,desc)=>{if(from&&typeof from=="object"||typeof from=="function")for(let key of __getOwnPropNames(from))!__hasOwnProp.call(to,key)&&key!==except&&__defProp(to,key,{get:()=>from[key],enumerable:!(desc=__getOwnPropDesc(from,key))||desc.enumerable});return to};var __toCommonJS=mod=>__copyProps(__defProp({},"__esModule",{value:!0}),mod);var main_exports={};__export(main_exports,{default:()=>CustomMenuPlugin});module.exports=__toCommonJS(main_exports);var import_obsidian2=require("obsidian");var import_obsidian=require("obsidian"),FIND_REGEX=/^\/(.*)\/[igmsuy]*$/,DEFAULT_SETTINGS={hideTitles:[]},ImportOldSettings=class extends import_obsidian.Modal{constructor(app,onSubmit){super(app);this.result=[];this.onSubmit=onSubmit}onOpen(){let{contentEl}=this;contentEl.empty(),contentEl.addClasses(["custom-menu-settings","import-old-settings"]),new import_obsidian.Setting(contentEl).setHeading().setName("Import old settings"),new import_obsidian.Setting(contentEl).setClass("no-display").addTextArea(text=>{text.setPlaceholder("Paste your old settings here, as a string separated by commas"),text.onChange(value=>{this.result=value.split(/[,\n] ?/).map(v=>v.trim())})}),new import_obsidian.Setting(contentEl).addButton(button=>{button.setButtonText("Import").onClick(()=>{this.onSubmit(this.result),this.close()}).setCta()}).addButton(button=>{button.setButtonText("Cancel").onClick(()=>this.close()).setWarning()})}onClose(){let{contentEl}=this;contentEl.empty()}},HideMenuSettingsTab=class extends import_obsidian.PluginSettingTab{constructor(app,plugin){super(app,plugin),this.plugin=plugin,this.settings=plugin.settings}isValidRegex(value){if(value.match(FIND_REGEX)===null)return!0;try{return this.plugin.createRegexFromText(value),!0}catch(e){return console.error(e),!1}}isError(value,ignoreEmpty=!1){return this.settings.hideTitles.filter(title=>title===value).length>1||!ignoreEmpty&&value.trim().length===0||!this.isValidRegex(value)}reloadError(){this.containerEl.findAll(".command-name").forEach(el=>{let input=el.find("input"),textValue=input.getAttr("command-name");textValue&&input.toggleClass("error",this.isError(textValue))})}display(){let{containerEl}=this;containerEl.empty(),containerEl.addClass("custom-menu-settings"),new import_obsidian.Setting(containerEl).setClass("no-display").addButton(button=>{button.setButtonText("Import old settings").onClick(()=>{new ImportOldSettings(this.app,async result=>{this.settings.hideTitles.push(...result),await this.plugin.saveSettings(),this.display()}).open()})}),new import_obsidian.Setting(containerEl).setHeading().setName("Hide commands").setClass("no-display-control").setDesc((0,import_obsidian.sanitizeHTMLToDom)(`<ul>
		<li>Enter the names of the commands.</li>
		<li>Deleted commandes will automatically reloaded.</li>
		<li>Encapsulate the command between <code>/</code> to use a regex match.</li>
		<div data-callout-metadata="" data-callout-fold="" data-callout="example" class="callout" dir="auto"><div class="callout-title" dir="auto"><div class="callout-icon" dir="auto"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="svg-icon lucide-list"><line x1="8" y1="6" x2="21" y2="6"></line><line x1="8" y1="12" x2="21" y2="12"></line><line x1="8" y1="18" x2="21" y2="18"></line><line x1="3" y1="6" x2="3.01" y2="6"></line><line x1="3" y1="12" x2="3.01" y2="12"></line><line x1="3" y1="18" x2="3.01" y2="18"></line></svg></div><div class="callout-title-inner" dir="auto">Example</div></div><div class="callout-content" dir="auto">
		<p dir="auto"><code>/(.*)icon(.*)/</code> will hide all commands containing the word <code>icon</code> in it.</p>
		</div></div>
		</ul>`));let temp="";new import_obsidian.Setting(containerEl).setClass("no-display").setClass("no-border-top").addText(text=>{text.setPlaceholder("Enter the name of the command"),text.inputEl.ariaLabel="Command name, insensitive",text.onChange(value=>{temp=value,text.inputEl.toggleClass("error",this.isError(value,!0));let plusButton=containerEl.find("[label='Add command']");plusButton.toggleClass("is-disabled",this.isError(value)),plusButton.toggleAttribute("aria-disabled",this.isError(value))})}).addExtraButton(button=>{button.setIcon("plus").setTooltip("Add command").onClick(async()=>{if(this.isError(temp)){new import_obsidian.Notice("Invalid command");return}this.settings.hideTitles.unshift(temp),temp="",await this.plugin.saveSettings(),this.plugin.monkeyPatch(this.plugin.reloadHideTitles()),this.display()}).extraSettingsEl.setAttr("label","Add command")}),new import_obsidian.Setting(containerEl).setName("Commands").setHeading(),this.settings.hideTitles.forEach((title,index)=>{new import_obsidian.Setting(containerEl).setClass("no-display").setClass("command-name").addText(text=>{text.setValue(title).onChange(async value=>{this.settings.hideTitles[index]=value,await this.plugin.saveSettings(),text.inputEl.toggleClass("error",this.isError(value)),text.inputEl.setAttr("command-name",value),this.reloadError()}),text.inputEl.setAttr("command-name",title),this.reloadError()}).addExtraButton(button=>{button.setIcon("trash").setTooltip("Delete command").onClick(async()=>{this.settings.hideTitles.splice(index,1),await this.plugin.saveSettings();for(let monkey of Object.values(this.plugin.activeMonkeys))monkey();this.plugin.activeMonkeys={},this.plugin.monkeyPatch(this.plugin.reloadHideTitles()),this.display()})})})}};function around(obj,factories){let removers=Object.keys(factories).map(key=>around1(obj,key,factories[key]));return removers.length===1?removers[0]:function(){removers.forEach(r=>r())}}function around1(obj,method,createWrapper){let inherited=obj[method],hadOwn=obj.hasOwnProperty(method),original=hadOwn?inherited:function(){return Object.getPrototypeOf(obj)[method].apply(this,arguments)},current=createWrapper(original);return inherited&&Object.setPrototypeOf(current,inherited),Object.setPrototypeOf(wrapper,current),obj[method]=wrapper,remove;function wrapper(...args){return current===original&&obj[method]===wrapper&&remove(),current.apply(this,args)}function remove(){obj[method]===wrapper&&(hadOwn?obj[method]=original:delete obj[method]),current!==original&&(current=original,Object.setPrototypeOf(wrapper,inherited||Function))}}var CustomMenuPlugin=class extends import_obsidian2.Plugin{constructor(){super(...arguments);this.activeMonkeys={}}monkeyPatch(hideTitles){let matchWithRegex=this.matchWithRegex.bind(this);console.log(`[${this.manifest.name}] Monkey patching - Hiding menu items`),this.activeMonkeys.menu=around(import_obsidian2.MenuItem.prototype,{setTitle(old){return function(title){let dom=this.dom;dom.dataset.stylizerTitle=String(title);for(let hidden of hideTitles)matchWithRegex(String(title).toLowerCase(),hidden)&&(dom.classList.add("custom-menu-hide-item"),this.setDisabled(!0));return old.call(this,title)}}})}createRegexFromText(toReplace){let flagsRegex=toReplace.match(/\/([gimy]+)$/),flags=flagsRegex?Array.from(new Set(flagsRegex[1].split(""))).join(""):"";return new RegExp(toReplace.replace(/\/(.+)\/.*/,"$1"),flags)}matchWithRegex(title,command){if(command.match(FIND_REGEX)){let regex=this.createRegexFromText(command);return title.match(regex)}else return title.toLowerCase()===command.toLowerCase()}reloadHideTitles(){return new Set(this.settings.hideTitles.map(title=>title.toLowerCase()).filter(title=>title.trim().length>0))}async onload(){console.log(`[${this.manifest.name}] Loading`),await this.loadSettings(),this.addSettingTab(new HideMenuSettingsTab(this.app,this));let hideTitles=this.reloadHideTitles();this.monkeyPatch(hideTitles)}async loadSettings(){this.settings=Object.assign({},DEFAULT_SETTINGS,await this.loadData())}onunload(){console.log(`[${this.manifest.name}] Unloading`);for(let monkey of Object.values(this.activeMonkeys))monkey();this.activeMonkeys={}}async saveSettings(){await this.saveData(this.settings)}};

/* nosourcemap */