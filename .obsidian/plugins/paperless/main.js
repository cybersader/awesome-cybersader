/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var v=Object.defineProperty;var x=Object.getOwnPropertyDescriptor;var R=Object.getOwnPropertyNames;var A=Object.prototype.hasOwnProperty;var E=(s,i)=>{for(var t in i)v(s,t,{get:i[t],enumerable:!0})},L=(s,i,t,e)=>{if(i&&typeof i=="object"||typeof i=="function")for(let n of R(i))!A.call(s,n)&&n!==t&&v(s,n,{get:()=>i[n],enumerable:!(e=x(i,n))||e.enumerable});return s};var C=s=>L(v({},"__esModule",{value:!0}),s);var O={};E(O,{default:()=>h});module.exports=C(O);var a=require("obsidian"),j={paperlessUrl:"",paperlessAuthToken:"",documentStoragePath:""},h=class extends a.Plugin{async onload(){await this.loadSettings(),this.addCommand({id:"insert-from-paperless",name:"Insert document",editorCallback:t=>{new k(this.app,t,this.settings).open()}}),this.addCommand({id:"replace-with-paperless",name:"Replace URL with document",editorCallback:t=>{let e=z(t,this.settings);e&&D(t,this.settings,e)}}),this.addCommand({id:"force-refresh-cache",name:"Refresh document cache",callback:()=>{new a.Notice("Refreshing paperless cache."),T(this.settings,!1)}}),this.addSettingTab(new y(this.app,this))}onunload(){}async loadSettings(){this.settings=Object.assign({},j,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}},d,b=new Map;async function T(s,i=!0){let t=new URL(s.paperlessUrl+"/api/documents/?format=json");d=await(0,a.requestUrl)({url:t.toString(),headers:{Authorization:"token "+s.paperlessAuthToken}});let n=new URL(s.paperlessUrl+"/api/tags/?format=json"),o=await(0,a.requestUrl)({url:n.toString(),headers:{accept:"application/json; version=5",Authorization:"token "+s.paperlessAuthToken}});for(let l=0;l<o.json.results.length;l++){let r=o.json.results[l];b.set(r.id,r)}i||new a.Notice("Paperless cache refresh completed. Found "+d.json.all.length+" documents and "+b.size+" tags.")}function z(s,i){try{return s.getSelection().split("api/documents/")[1].split("/preview")[0]}catch(t){return null}}async function w(s,i){let t=new URL(s.paperlessUrl+"/api/documents/"+i+"/share_links/?format=json"),e=await(0,a.requestUrl)({url:t.toString(),headers:{Authorization:"token "+s.paperlessAuthToken}});for(let n of e.json)if(n.expiration==null)return new URL(s.paperlessUrl+"/share/"+n.slug);return null}async function F(s,i){let t=new URL(s.paperlessUrl+"/api/share_links/"),e=await(0,a.requestUrl)({url:t.toString(),method:"POST",contentType:"application/json",body:'{"document":'+i+',"file_version":"original"}',headers:{Authorization:"token "+s.paperlessAuthToken}})}async function I(s,i){let t=await w(s,i);if(!t&&(F(s,i),t=await w(s,i),t==null))for(let e=0;e<3&&(t=await w(s,i),!t);e++);return t}async function D(s,i,t){let e=(0,a.normalizePath)(i.documentStoragePath);if(e){let r=this.app.vault.getAbstractFileByPath(e);!!r&&r instanceof a.TFolder||await this.app.vault.createFolder(e)}let n="paperless-"+t+".pdf",o=this.app.vault.getAbstractFileByPath(e+"/"+n);if(!(!!o&&o instanceof a.TFile)){let r=await I(i,t);r&&await this.app.vault.create(e+"/"+n,r.href)}s.replaceSelection("![["+n+"]]")}var k=class extends a.Modal{constructor(t,e,n){super(t);this.editor=e,this.settings=n,this.page=0}async displayThumbnail(t,e){let n=this.settings.paperlessUrl+"/api/documents/"+e+"/thumb/",o=await(0,a.requestUrl)({url:n.toString(),headers:{Authorization:"token "+this.settings.paperlessAuthToken}});t.src=URL.createObjectURL(new Blob([o.arrayBuffer]))}async displayTags(t,e){let n=this.settings.paperlessUrl+"/api/documents/"+e+"/",l=(await(0,a.requestUrl)({url:n.toString(),headers:{Authorization:"token "+this.settings.paperlessAuthToken}})).json.tags;for(let r=0;r<l.length;r++){let u=t.createDiv(),c=b.get(l[r]);u.createEl("span",{text:c.name}).setCssStyles({color:c.text_color,fontSize:"0.7em"}),u.setCssStyles({background:c.color,borderRadius:"8px",padding:"2px",marginTop:"1px",marginRight:"5px"})}}async onOpen(){let{contentEl:t}=this;d==null&&await T(this.settings);let e=t.createDiv({cls:"obsidian-paperless-row"}),n=e.createDiv({cls:"obsidian-paperless-column"}),o=e.createDiv({cls:"obsidian-paperless-column"}),l=t.createDiv(),r=d.json.all.sort((c,p)=>+c-+p).reverse();new IntersectionObserver(()=>{let c=this.page,p=this.page+16;p>r.length&&(p=r.length),this.page=p;for(let g=c;g<p;g++){let m=r[g],f=g&1?o.createDiv({cls:"obsidian-paperless-overallDiv"}):n.createDiv({cls:"obsidian-paperless-overallDiv"}),U=f.createDiv({cls:"obsidian-paperless-imageDiv"}),P=f.createDiv({cls:"obsidian-paperless-tagDiv"});this.displayTags(P,m);let S=U.createEl("img");S.width=260,S.onclick=()=>{D(this.editor,this.settings,m),f.setCssStyles({opacity:"0.5"})},this.displayThumbnail(S,m)}},{threshold:[.1]}).observe(l)}onClose(){let{contentEl:t}=this;t.empty()}},y=class extends a.PluginSettingTab{constructor(t,e){super(t,e);this.plugin=e}display(){let{containerEl:t}=this;t.empty(),new a.Setting(t).setName("Paperless URL").setDesc("Full URL to your paperless instance.").addText(e=>e.setValue(this.plugin.settings.paperlessUrl).onChange(async n=>{this.plugin.settings.paperlessUrl=n,await this.plugin.saveSettings()})),new a.Setting(t).setName("Paperless authentication token").setDesc("Token obtained using https://docs.paperless-ngx.com/api/#authorization").addText(e=>e.setValue(this.plugin.settings.paperlessAuthToken).onChange(async n=>{this.plugin.settings.paperlessAuthToken=n,await this.plugin.saveSettings()})),new a.Setting(t).setName("Document storage path").setDesc("Location for stored documents.").addText(e=>e.setValue(this.plugin.settings.documentStoragePath).onChange(async n=>{this.plugin.settings.documentStoragePath=n,await this.plugin.saveSettings()}))}};

/* nosourcemap */