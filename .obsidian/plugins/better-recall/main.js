/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __reflectGet = Reflect.get;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __superGet = (cls, obj, key) => __reflectGet(__getProtoOf(cls), key, obj);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => BetterRecallPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian14 = require("obsidian");

// node_modules/.pnpm/uuid@10.0.0/node_modules/uuid/dist/esm-browser/stringify.js
var byteToHex = [];
for (i = 0; i < 256; ++i) {
  byteToHex.push((i + 256).toString(16).slice(1));
}
var i;
function unsafeStringify(arr, offset = 0) {
  return (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + "-" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + "-" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + "-" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + "-" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();
}

// node_modules/.pnpm/uuid@10.0.0/node_modules/uuid/dist/esm-browser/rng.js
var getRandomValues;
var rnds8 = new Uint8Array(16);
function rng() {
  if (!getRandomValues) {
    getRandomValues = typeof crypto !== "undefined" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);
    if (!getRandomValues) {
      throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
    }
  }
  return getRandomValues(rnds8);
}

// node_modules/.pnpm/uuid@10.0.0/node_modules/uuid/dist/esm-browser/native.js
var randomUUID = typeof crypto !== "undefined" && crypto.randomUUID && crypto.randomUUID.bind(crypto);
var native_default = {
  randomUUID
};

// node_modules/.pnpm/uuid@10.0.0/node_modules/uuid/dist/esm-browser/v4.js
function v4(options, buf, offset) {
  if (native_default.randomUUID && !buf && !options) {
    return native_default.randomUUID();
  }
  options = options || {};
  var rnds = options.random || (options.rng || rng)();
  rnds[6] = rnds[6] & 15 | 64;
  rnds[8] = rnds[8] & 63 | 128;
  if (buf) {
    offset = offset || 0;
    for (var i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }
    return buf;
  }
  return unsafeStringify(rnds);
}
var v4_default = v4;

// src/spaced-repetition/index.ts
var SpacedRepetitionAlgorithm = class {
  constructor(parameters = {}) {
    this.items = [];
    this.queuedItems = [];
    this.sessionEndTime = this.getEndOfDay(new Date());
    this.parameters = __spreadProps(__spreadValues({}, this.getDefaultValues()), {
      parameters
    });
  }
  addItem(item) {
    this.items.push(item);
    this.scheduleReview(item);
  }
  removeItem(item) {
    const index = this.items.findIndex((i) => i.id === item.id);
    if (index > -1) {
      this.items.splice(index, 1);
    }
  }
  setParameters(parameters) {
    this.parameters = __spreadValues(__spreadValues({}, this.parameters), parameters);
  }
  getItemCount() {
    return this.items.length;
  }
  getParameters() {
    return this.parameters;
  }
  resetItems() {
    this.items = [];
  }
  startNewSession() {
    this.sessionEndTime = this.getEndOfDay(new Date());
    this.queuedItems = [];
    this.refreshQueue();
  }
  addToQueueIfDueToday(item) {
    if (this.isDueToday(item) && !this.queuedItems.includes(item)) {
      this.queuedItems.push(item);
    }
  }
  isDueToday(item) {
    var _a;
    const now = new Date();
    return item.state === 0 /* NEW */ || !!item.nextReviewDate && item.nextReviewDate <= this.sessionEndTime && ((_a = item.nextReviewDate) == null ? void 0 : _a.toDateString()) === now.toDateString();
  }
  refreshQueue() {
    this.items.forEach((item) => this.addToQueueIfDueToday(item));
  }
  getEndOfDay(date) {
    const endOfDate = new Date(date);
    endOfDate.setHours(23, 59, 59, 999);
    return endOfDate;
  }
};

// src/ui/modals/card-modal/CardModal.ts
var import_obsidian3 = require("obsidian");

// src/ui/components/ButtonsBarComponent.ts
var import_obsidian = require("obsidian");

// src/ui/classes.ts
var CENTERED_VIEW = "better-recall-centered-view";
var BUTTONS_BAR_CLASS = "better-recall-buttons-bar";
var NEW_CARDS_COLOR = "better-recall-new-cards-color";
var LEARN_CARDS_COLOR = "better-recall-learn-cards-color";
var DUE_CARDS_COLOR = "better-recall-due-cards-color";

// src/ui/components/ButtonsBarComponent.ts
var ButtonsBarComponent = class extends import_obsidian.Component {
  constructor(contentEl) {
    super();
    this.contentEl = contentEl;
    this.render();
  }
  onClose(cb) {
    this.closeButtonComp.onClick(cb);
    return this;
  }
  onSubmit(cb) {
    this.submitButtonComp.onClick(cb);
    return this;
  }
  render() {
    this.buttonsBarEl = this.contentEl.createDiv(BUTTONS_BAR_CLASS);
    this.closeButtonComp = new import_obsidian.ButtonComponent(this.buttonsBarEl);
    this.closeButtonComp.setButtonText("Cancel");
    this.submitButtonComp = new import_obsidian.ButtonComponent(this.buttonsBarEl);
    this.submitButtonComp.setCta();
    this.submitButtonComp.setButtonText("Save");
    this.submitButtonComp.setDisabled(true);
  }
  setCloseButtonText(text) {
    this.closeButtonComp.setButtonText(text);
    return this;
  }
  setSubmitButtonDisabled(disabled) {
    this.submitButtonComp.setDisabled(disabled);
    return this;
  }
  setSubmitText(text) {
    this.submitButtonComp.setButtonText(text);
    return this;
  }
};

// src/ui/components/input/InputAreaComponent.ts
var import_obsidian2 = require("obsidian");

// src/ui/components/input/utils.ts
function createDescriptionEl(container, text) {
  const descriptionEl = container.createEl("p", {
    text,
    cls: "setting-item-description better-recall-description"
  });
  container.insertBefore(descriptionEl, this.inputEl);
  return descriptionEl;
}

// src/ui/components/input/InputAreaComponent.ts
var InputAreaComponent = class extends import_obsidian2.TextAreaComponent {
  constructor(contentEl, options) {
    super(contentEl);
    this.contentEl = contentEl;
    this.options = options;
    this.inputEl.rows = 5;
    this.inputEl.style.resize = "none";
    this.render();
  }
  render() {
    var _a;
    if ((_a = this.options) == null ? void 0 : _a.description) {
      this.descriptionEl = createDescriptionEl(this.contentEl, this.options.description);
    }
    this.inputEl.classList.add("better-recall-field");
  }
};

// src/ui/modals/card-modal/CardModal.ts
var CardModal = class extends import_obsidian3.Modal {
  constructor(plugin) {
    super(plugin.app);
    this.plugin = plugin;
  }
  onOpen() {
    super.onOpen();
    this.optionsContainerEl = this.contentEl.createDiv("better-recall-card__add-options");
    this.render();
  }
  onClose() {
    super.onClose();
    this.plugin.decksManager.save();
    this.contentEl.empty();
  }
  renderDeckDropdown() {
    const decks = Object.entries(this.plugin.decksManager.getDecks()).reduce((curr, [id, deck]) => {
      curr[id] = deck.getName();
      return curr;
    }, {});
    this.optionsContainerEl.createEl("p", {
      text: "Deck:",
      cls: "setting-item-description better-recall-card-modal-description"
    });
    this.deckDropdownComp = new import_obsidian3.DropdownComponent(this.optionsContainerEl).addOptions(decks);
    this.deckDropdownComp.selectEl.addClass("better-recall-field");
  }
  renderCardTypeDropdown() {
    this.optionsContainerEl.createEl("p", {
      text: "Type:",
      cls: "setting-item-description better-recall-card-modal-description"
    });
    const cardTypeDropdown = new import_obsidian3.DropdownComponent(this.optionsContainerEl).addOptions({ basic: "Basic" }).setDisabled(true);
    cardTypeDropdown.selectEl.addClass("better-recall-field");
  }
  renderBasicTypeFields(front, back) {
    this.frontInputComp = new InputAreaComponent(this.contentEl, {
      description: "Front"
    }).setValue(front != null ? front : "").onChange(this.handleInputChange.bind(this));
    this.backInputComp = new InputAreaComponent(this.contentEl, {
      description: "Back"
    }).setValue(back != null ? back : "").onChange(this.handleInputChange.bind(this));
    this.backInputComp.descriptionEl.addClass("better-recall-back-field");
  }
  renderButtonsBar(submitText, options = {}) {
    var _a;
    (_a = options.container) != null ? _a : options.container = this.contentEl;
    this.buttonsBarComp = new ButtonsBarComponent(options.container).setSubmitButtonDisabled(true).setSubmitText(submitText).onSubmit(this.submit.bind(this)).onClose(this.close.bind(this));
  }
  handleInputChange() {
    const disabled = this.frontInputComp.getValue().length === 0 || this.backInputComp.getValue().length === 0;
    this.buttonsBarComp.setSubmitButtonDisabled(disabled);
  }
};

// src/ui/modals/card-modal/AddCardModal.ts
var AddCardModal = class extends CardModal {
  constructor(plugin) {
    super(plugin);
    this.plugin = plugin;
    this.setTitle("Add card");
  }
  render() {
    this.renderCardTypeDropdown();
    this.renderDeckDropdown();
    this.renderBasicTypeFields();
    this.renderButtonsBar("Add");
  }
  submit() {
    const deckId = this.deckDropdownComp.getValue();
    const front = this.frontInputComp.getValue();
    const back = this.backInputComp.getValue();
    this.frontInputComp.setValue("");
    this.backInputComp.setValue("");
    const card = {
      id: v4_default(),
      type: 0 /* BASIC */,
      content: {
        front,
        back
      },
      state: 0 /* NEW */,
      easeFactor: 2.5,
      interval: 0,
      iteration: 0,
      stepIndex: 0
    };
    this.plugin.decksManager.addCard(deckId, card);
    this.plugin.getEventEmitter().emit("addItem", { deckId, item: card });
  }
};

// src/commands.ts
function registerCommands(plugin) {
  plugin.addCommand({
    id: "recall-view",
    name: "Recall",
    callback: () => {
      plugin.openRecallView();
    }
  });
  plugin.addCommand({
    id: "add-card",
    name: "Add card",
    callback: () => {
      new AddCardModal(plugin).open();
    }
  });
}

// src/settings/data.ts
var DEFAULT_SETTINGS = {
  ankiParameters: {
    lapseInterval: 0.5,
    easyInterval: 4,
    easyBonus: 1.3,
    graduatingInterval: 1,
    minEaseFactor: 0.2,
    easeFactorDecrement: 0.2,
    easeFactorIncrement: 0.15,
    hardIntervalMultiplier: 1.2,
    learningSteps: [1, 10],
    relearningSteps: [10]
  }
};

// src/ui/views/index.ts
var import_obsidian11 = require("obsidian");

// src/ui/modals/CreateDeckModal.ts
var import_obsidian5 = require("obsidian");

// src/ui/components/input/InputFieldComponent.ts
var import_obsidian4 = require("obsidian");
var InputFieldComponent = class extends import_obsidian4.TextComponent {
  constructor(contentEl, options) {
    super(contentEl);
    this.contentEl = contentEl;
    this.options = options;
    this.render();
  }
  onEnter() {
  }
  cleanup() {
    this.removeKeyEnterAction(this.inputEl);
  }
  render() {
    var _a;
    if ((_a = this.options) == null ? void 0 : _a.description) {
      this.descriptionEl = createDescriptionEl(this.contentEl, this.options.description);
    }
    this.inputEl.classList.add("better-recall-field");
    this.addKeyEnterAction(this.inputEl);
  }
  addKeyEnterAction(inputEl) {
    inputEl.addEventListener("keypress", this.onEnterPress.bind(this));
  }
  removeKeyEnterAction(inputEl) {
    inputEl.removeEventListener("keypress", this.onEnterPress.bind(this));
  }
  onEnterPress(event) {
    setTimeout(() => {
      const isEmpty = this.getValue().length === 0;
      if (event.key !== "Enter" || isEmpty) {
        return;
      }
      this.onEnter();
    }, 1);
  }
};

// src/ui/modals/CreateDeckModal.ts
var CreateDeckModal = class extends import_obsidian5.Modal {
  constructor(plugin) {
    super(plugin.app);
    this.plugin = plugin;
    this.setTitle("Create new deck");
  }
  onOpen() {
    super.onOpen();
    this.render();
  }
  render() {
    this.deckNameInputComp = new InputFieldComponent(this.contentEl, {
      description: "New deck name:"
    }).setPlaceholder("Algorithms & datastructures").onChange((value) => {
      this.buttonsBarComp.setSubmitButtonDisabled(value.length === 0);
    });
    this.deckNameInputComp.onEnter = () => {
      this.createDeck();
    };
    this.deckNameInputComp.descriptionEl.addClass("better-recall-deck-name-field");
    this.deckDescriptionInputComp = new InputFieldComponent(this.contentEl, {
      description: "Description (optional):"
    }).setPlaceholder("A lovely CS learning experience.");
    this.deckDescriptionInputComp.onEnter = () => {
      if (this.deckNameInputComp.getValue().length === 0) {
        return;
      }
      this.createDeck();
    };
    this.deckDescriptionInputComp.descriptionEl.addClass("better-recall-deck-description-field");
    this.buttonsBarComp = new ButtonsBarComponent(this.contentEl).setSubmitText("Create").setSubmitButtonDisabled(true).onClose(this.close.bind(this)).onSubmit(() => __async(this, null, function* () {
      yield this.createDeck();
    }));
  }
  createDeck() {
    return __async(this, null, function* () {
      this.buttonsBarComp.setSubmitButtonDisabled(true);
      const createdDeck = yield this.plugin.decksManager.create(this.deckNameInputComp.getValue(), this.deckDescriptionInputComp.getValue());
      this.plugin.getEventEmitter().emit("addDeck", { deck: createdDeck });
      this.close();
    });
  }
  onClose() {
    this.deckNameInputComp.cleanup();
    this.deckDescriptionInputComp.cleanup();
    super.onClose();
    this.contentEl.empty();
  }
};

// src/ui/views/SubView.ts
var RecallSubView = class {
  constructor(plugin, recallView) {
    this.plugin = plugin;
    this.recallView = recallView;
  }
  onClose() {
  }
  openDeckModal() {
    const modal = new CreateDeckModal(this.plugin);
    modal.open();
  }
};

// src/ui/views/EmptyView.ts
var EmptyView = class extends RecallSubView {
  render() {
    this.rootEl = this.recallView.rootEl.createDiv("better-recall-empty-view");
    this.rootEl.addClass("empty-state");
    const containerEl = this.rootEl.createDiv("empty-state-container");
    const titleContainerEl = containerEl.createDiv("empty-state-title better-recall-empty-state-title");
    titleContainerEl.setText("No available decks");
    const actionListContainerEl = containerEl.createDiv("empty-state-action-list");
    const createNewDeckActionEl = actionListContainerEl.createDiv("empty-state-action");
    createNewDeckActionEl.setText("Create new deck");
    createNewDeckActionEl.onClickEvent(() => {
      this.openDeckModal();
    });
  }
};

// src/spaced-repetition/anki.ts
var MILLISECONDS_PER_DAY = 24 * 60 * 60 * 1e3;
var AnkiAlgorithm = class extends SpacedRepetitionAlgorithm {
  getDefaultValues() {
    return DEFAULT_SETTINGS.ankiParameters;
  }
  get updateStrategies() {
    return {
      [0 /* AGAIN */]: (item) => {
        item.easeFactor = Math.max(this.parameters.minEaseFactor, item.easeFactor - this.parameters.easeFactorDecrement);
        if (item.state === 2 /* REVIEW */) {
          item.state = 3 /* RELEARNING */;
          item.stepIndex = 0;
        } else {
          item.stepIndex = 0;
        }
        return item.interval * this.parameters.lapseInterval;
      },
      [1 /* HARD */]: (item) => {
        item.easeFactor = Math.max(this.parameters.minEaseFactor, item.easeFactor - this.parameters.easeFactorIncrement);
        if (item.state === 1 /* LEARNING */ || item.state === 3 /* RELEARNING */) {
          item.stepIndex += 1;
        }
        return Math.max(item.interval * this.parameters.hardIntervalMultiplier, item.interval + 1);
      },
      [2 /* GOOD */]: (item) => {
        if (item.state === 0 /* NEW */ || item.state === 1 /* LEARNING */ || item.state === 3 /* RELEARNING */) {
          item.stepIndex += 1;
          const steps = item.state === 1 /* LEARNING */ ? this.parameters.learningSteps : this.parameters.relearningSteps;
          if (item.stepIndex >= steps.length) {
            item.state = 2 /* REVIEW */;
            return this.parameters.graduatingInterval;
          }
          return 0;
        }
        return Math.max(item.interval * item.easeFactor, item.interval + 1);
      },
      [3 /* EASY */]: (item) => {
        item.easeFactor += this.parameters.easeFactorIncrement;
        if (item.state === 0 /* NEW */ || item.state === 1 /* LEARNING */ || item.state === 3 /* RELEARNING */) {
          item.state = 2 /* REVIEW */;
          return this.parameters.easyInterval;
        }
        return item.interval * item.easeFactor * this.parameters.easyBonus;
      }
    };
  }
  calculatePotentialNextReviewDate(item, performanceResponse) {
    const newItem = __spreadValues({}, item);
    if (newItem.state === 0 /* NEW */) {
      newItem.state = 1 /* LEARNING */;
      newItem.stepIndex = 0;
    }
    const newInterval = this.updateStrategies[performanceResponse](newItem);
    const steps = newItem.state === 1 /* LEARNING */ ? this.parameters.learningSteps : this.parameters.relearningSteps;
    if ((newItem.state === 1 /* LEARNING */ || newItem.state === 3 /* RELEARNING */) && newItem.stepIndex < steps.length) {
      return this.calculateNextReviewDate(steps[newItem.stepIndex], true);
    } else {
      return this.calculateNextReviewDate(newInterval);
    }
  }
  scheduleReview(item) {
    item.lastReviewDate = new Date();
    if (item.state === 1 /* LEARNING */ || item.state === 3 /* RELEARNING */) {
      const steps = item.state === 1 /* LEARNING */ ? this.parameters.learningSteps : this.parameters.relearningSteps;
      if (item.stepIndex < steps.length) {
        item.nextReviewDate = this.calculateNextReviewDate(steps[item.stepIndex], true);
      } else {
        item.nextReviewDate = this.calculateNextReviewDate(item.interval);
        item.state = 2 /* REVIEW */;
      }
    } else if (item.state === 0 /* NEW */) {
      item.nextReviewDate = new Date();
    } else {
      item.nextReviewDate = this.calculateNextReviewDate(item.interval);
    }
    this.addToQueueIfDueToday(item);
  }
  getNextReviewItem() {
    var _a;
    return (_a = this.queuedItems.shift()) != null ? _a : null;
  }
  updateItemAfterReview(item, performanceResponse) {
    if (item.state === 0 /* NEW */) {
      item.state = 1 /* LEARNING */;
      item.stepIndex = 0;
    }
    item.interval = this.updateStrategies[performanceResponse](item);
    item.iteration += 1;
    this.scheduleReview(item);
  }
  calculateNextReviewDate(interval, inMinutes = false) {
    const now = new Date();
    const milliseconds = interval * (inMinutes ? 60 * 1e3 : MILLISECONDS_PER_DAY);
    return new Date(now.getTime() + milliseconds);
  }
};

// src/ui/views/ReviewView.ts
var import_obsidian6 = require("obsidian");

// src/util.ts
function formatTimeDifference(futureDate) {
  const now = new Date();
  const differenceInMillis = futureDate.getTime() - now.getTime();
  const seconds = Math.floor(differenceInMillis / 1e3);
  const minutes = Math.floor(seconds / 60);
  const hours = Math.floor(minutes / 60);
  const days = Math.floor(hours / 24);
  const weeks = Math.floor(days / 7);
  const months = Math.floor(days / 30.44);
  const years = Math.floor(days / 365.25);
  if (years > 0) {
    return `${years} ${years === 1 ? "year" : "years"}`;
  } else if (months > 0) {
    return `${months} ${months === 1 ? "month" : "months"}`;
  } else if (weeks > 0) {
    return `${weeks} ${weeks === 1 ? "week" : "weeks"}`;
  } else if (days > 0) {
    return `${days} ${days === 1 ? "day" : "days"}`;
  } else if (hours > 0) {
    return `${hours} ${hours === 1 ? "hour" : "hours"}`;
  } else {
    const printedMinutes = Math.max(1, minutes);
    return `${printedMinutes} ${printedMinutes === 1 ? "min" : "mins"}`;
  }
}

// src/ui/views/ReviewView.ts
var ReviewView = class extends RecallSubView {
  constructor(plugin, recallView) {
    super(plugin, recallView);
    this.plugin = plugin;
    this.recallView = recallView;
    this.currentItem = null;
    this.vaultRootPath = plugin.app.vault.getRoot().path;
  }
  setDeck(deck) {
    this.deck = deck;
    this.plugin.algorithm.resetItems();
    this.deck.cardsArray.forEach((card) => this.plugin.algorithm.addItem(card));
    this.plugin.algorithm.startNewSession();
    this.state = 0 /* ONGOING */;
  }
  handleKeyInput(event) {
    if (this.state === 1 /* FINISHED */) {
      return;
    }
    const isAnswerButtonsBarVisible = !this.answerButtonsBarEl.hasClass("better-recall--display-none");
    if (isAnswerButtonsBarVisible) {
      if (event.key === " ") {
        this.showRecallButtons();
      }
    } else {
      if (event.key === "1") {
        this.handleResponse(0 /* AGAIN */);
      } else if (event.key === "2") {
        this.handleResponse(2 /* GOOD */);
      } else if (event.key === "3") {
        this.handleResponse(1 /* HARD */);
      } else if (event.key === "4") {
        this.handleResponse(3 /* EASY */);
      }
    }
  }
  render() {
    this.rootEl = this.recallView.rootEl.createDiv(CENTERED_VIEW);
    document.addEventListener("keypress", this.handleKeyInput.bind(this));
    this.contentEl = this.rootEl.createDiv("better-recall-card better-recall-review-card");
    this.cardFrontEl = this.contentEl.createEl("h3", {
      cls: "better-recall-review-card__content"
    });
    this.dividerEl = this.contentEl.createEl("div", {
      cls: "better-recall-review-card__divider"
    });
    this.cardBackEl = this.contentEl.createEl("h3", {
      cls: "better-recall-review-card__content"
    });
    this.renderAnswerButtons();
    this.showNextItem();
  }
  renderAnswerButtons() {
    this.answerButtonsBarEl = this.rootEl.createDiv(`${BUTTONS_BAR_CLASS} better-recall-review-card__answer-buttons-bar`);
    const exitButton = new import_obsidian6.ButtonComponent(this.answerButtonsBarEl);
    const exitEmojiEl = exitButton.buttonEl.createSpan();
    const exitTextEl = exitButton.buttonEl.createSpan();
    exitEmojiEl.setText("\u{1F6AA}");
    exitTextEl.setText("Exit");
    exitButton.onClick(() => this.recallView.openDecksView());
    this.showAnswerButton = new import_obsidian6.ButtonComponent(this.answerButtonsBarEl).setCta();
    const showAnswerEmojiEl = this.showAnswerButton.buttonEl.createSpan();
    const showAnswerTextEl = this.showAnswerButton.buttonEl.createSpan();
    showAnswerEmojiEl.setText("\u{1F440}");
    showAnswerTextEl.setText("Show answer");
    this.showAnswerButton.onClick(this.showRecallButtons.bind(this));
  }
  renderRecallButtons() {
    this.recallButtonsBarEl = this.rootEl.createDiv(`${BUTTONS_BAR_CLASS} better-recall-review-card__answer-buttons-bar`);
    this.renderButton(0 /* AGAIN */, "\u274C", "Again");
    this.renderButton(2 /* GOOD */, "\u{1F62C}", "Good");
    this.renderButton(1 /* HARD */, "\u{1F630}", "Hard");
    this.renderButton(3 /* EASY */, "\u{1F451}", "Easy");
  }
  renderButton(performanceResponse, emoji, text) {
    if (!this.currentItem) {
      return;
    }
    const button = new import_obsidian6.ButtonComponent(this.recallButtonsBarEl);
    const emojiEl = button.buttonEl.createSpan();
    const textEl = button.buttonEl.createSpan();
    const timeEl = button.buttonEl.createSpan("better-recall-review-card__time");
    emojiEl.setText(emoji);
    textEl.setText(text);
    const nextReviewDate = this.plugin.algorithm.calculatePotentialNextReviewDate(this.currentItem, performanceResponse);
    timeEl.setText(formatTimeDifference(nextReviewDate));
    button.onClick(() => this.handleResponse(performanceResponse));
  }
  showRecallButtons() {
    this.cardBackEl.removeClass("better-recall--display-none");
    this.dividerEl.removeClass("better-recall--display-none");
    this.answerButtonsBarEl.addClass("better-recall--display-none");
    this.renderRecallButtons();
  }
  showNextItem() {
    if (this.recallButtonsBarEl) {
      this.recallButtonsBarEl.remove();
    }
    this.answerButtonsBarEl.removeClass("better-recall--display-none");
    this.currentItem = this.plugin.algorithm.getNextReviewItem();
    this.dividerEl.addClass("better-recall--display-none");
    this.cardBackEl.addClass("better-recall--display-none");
    if (this.currentItem) {
      this.cardFrontEl.empty();
      this.cardBackEl.empty();
      import_obsidian6.MarkdownRenderer.render(this.plugin.app, this.currentItem.content.front, this.cardFrontEl, this.vaultRootPath, this.plugin);
      import_obsidian6.MarkdownRenderer.render(this.plugin.app, this.currentItem.content.back, this.cardBackEl, this.vaultRootPath, this.plugin);
      this.cardFrontEl.querySelectorAll("a.internal-link").forEach((link) => {
        link.addEventListener("click", this.handleInternalLinkClick.bind(this));
      });
      this.cardBackEl.querySelectorAll("a.internal-link").forEach((link) => {
        link.addEventListener("click", this.handleInternalLinkClick.bind(this));
      });
    } else {
      this.cardFrontEl.setText("Review session complete \u{1F680}!");
      this.showAnswerButton.buttonEl.hide();
      this.state = 1 /* FINISHED */;
    }
  }
  handleInternalLinkClick(event) {
    event.preventDefault();
    const href = event.target.getAttribute("data-href");
    if (href) {
      this.plugin.app.workspace.openLinkText(href, this.vaultRootPath, true);
    }
  }
  handleResponse(response) {
    if (this.currentItem) {
      this.plugin.algorithm.updateItemAfterReview(this.currentItem, response);
      this.showNextItem();
    }
  }
  onClose() {
    super.onClose();
    document.removeEventListener("keypress", this.handleKeyInput.bind(this));
    this.cardFrontEl.querySelectorAll("a.internal-link").forEach((link) => {
      link.removeEventListener("click", this.handleInternalLinkClick.bind(this));
    });
    this.cardBackEl.querySelectorAll("a.internal-link").forEach((link) => {
      link.removeEventListener("click", this.handleInternalLinkClick.bind(this));
    });
    this.plugin.decksManager.save();
  }
};

// src/ui/views/DecksView.ts
var import_obsidian10 = require("obsidian");

// src/ui/modals/EditDeckModal.ts
var import_obsidian7 = require("obsidian");
var EditDeckModal = class extends import_obsidian7.Modal {
  constructor(plugin, deck) {
    super(plugin.app);
    this.plugin = plugin;
    this.deck = deck;
    this.setTitle(`Edit deck "${deck.getName()}"`);
  }
  onOpen() {
    super.onOpen();
    this.render();
  }
  render() {
    this.deckNameInputComp = new InputFieldComponent(this.contentEl, {
      description: "Deck name:"
    }).setValue(this.deck.getName()).onChange((value) => {
      this.buttonsBarComp.setSubmitButtonDisabled(value.length === 0);
    });
    this.deckNameInputComp.descriptionEl.addClass("better-recall-deck-name-field");
    this.deckDescriptionInputComp = new InputFieldComponent(this.contentEl, {
      description: "Deck description:"
    }).setValue(this.deck.getDescription());
    this.deckDescriptionInputComp.descriptionEl.addClass("better-recall-deck-description-field");
    const buttonsContainer = this.contentEl.createDiv("better-recall__buttons-container");
    const deleteButton = new import_obsidian7.ButtonComponent(buttonsContainer).setButtonText("Delete").onClick(() => this.deleteDeck());
    deleteButton.buttonEl.addClass("better-recall-delete-button");
    this.buttonsBarComp = new ButtonsBarComponent(buttonsContainer).setSubmitText("Save").setSubmitButtonDisabled(false).onClose(this.close.bind(this)).onSubmit(() => __async(this, null, function* () {
      if (this.deckNameInputComp.getValue().length === 0) {
        return;
      }
      yield this.editDeck();
    }));
  }
  deleteDeck() {
    return __async(this, null, function* () {
      this.buttonsBarComp.setSubmitButtonDisabled(true);
      yield this.plugin.decksManager.delete(this.deck.id);
      this.plugin.getEventEmitter().emit("deleteDeck", { deck: this.deck });
      this.close();
    });
  }
  editDeck() {
    return __async(this, null, function* () {
      this.buttonsBarComp.setSubmitButtonDisabled(true);
      yield this.plugin.decksManager.updateInformation(this.deck.id, this.deckNameInputComp.getValue(), this.deckDescriptionInputComp.getValue());
      this.plugin.getEventEmitter().emit("editDeck", { deck: this.deck });
      this.close();
    });
  }
  onClose() {
    this.deckNameInputComp.cleanup();
    this.deckDescriptionInputComp.cleanup();
    super.onClose();
    this.contentEl.empty();
  }
};

// src/ui/modals/EditCardsModal.ts
var import_obsidian9 = require("obsidian");

// src/ui/modals/card-modal/EditCardModal.ts
var import_obsidian8 = require("obsidian");
var EditCardModal = class extends CardModal {
  constructor(plugin, deck, card) {
    super(plugin);
    this.plugin = plugin;
    this.deck = deck;
    this.card = card;
    this.setTitle("Edit card");
  }
  render() {
    this.renderCardTypeDropdown();
    this.renderDeckDropdown();
    this.renderBasicTypeFields(this.card.content.front, this.card.content.back);
    const buttonsContainer = this.contentEl.createDiv("better-recall__buttons-container");
    const deleteButton = new import_obsidian8.ButtonComponent(buttonsContainer).setButtonText("Delete").onClick(() => this.deleteCard());
    deleteButton.buttonEl.addClass("better-recall-delete-button");
    this.renderButtonsBar("Save", { container: buttonsContainer });
  }
  deleteCard() {
    this.plugin.decksManager.removeCard(this.deck.id, this.card.id);
    this.plugin.getEventEmitter().emit("deleteItem", { deckId: this.deck.id, deletedItem: this.card });
    this.close();
  }
  submit() {
    const deckId = this.deckDropdownComp.getValue();
    const front = this.frontInputComp.getValue();
    const back = this.backInputComp.getValue();
    this.frontInputComp.setValue("");
    this.backInputComp.setValue("");
    const updatedCard = __spreadProps(__spreadValues({}, this.card), {
      content: {
        front,
        back
      }
    });
    if (deckId === this.deck.id) {
      this.plugin.decksManager.updateCardContent(deckId, updatedCard);
    } else {
      this.plugin.decksManager.removeCard(deckId, updatedCard.id);
      this.plugin.decksManager.addCard(deckId, updatedCard);
    }
    this.plugin.getEventEmitter().emit("editItem", { deckId, newItem: updatedCard });
    this.close();
  }
};

// src/ui/modals/EditCardsModal.ts
var cardAttributes = {
  cardId: "data-card-id"
};
var EditCardsModal = class extends import_obsidian9.Modal {
  constructor(plugin, deck) {
    super(plugin.app);
    this.plugin = plugin;
    this.deck = deck;
    this.setTitle(`Cards from "${deck.getName()}"`);
  }
  onOpen() {
    super.onOpen();
    this.render();
    this.plugin.getEventEmitter().on("editItem", this.handleEditItem.bind(this));
    this.plugin.getEventEmitter().on("addItem", this.handleAddItem.bind(this));
    this.plugin.getEventEmitter().on("deleteItem", this.handleDeleteItem.bind(this));
  }
  handleDeleteItem({ payload }) {
    if (!payload) {
      return;
    }
    const { deletedItem } = payload;
    const cardEl = this.contentEl.querySelector(`[${cardAttributes.cardId}="${deletedItem.id}"]`);
    cardEl == null ? void 0 : cardEl.remove();
  }
  handleAddItem() {
    this.contentEl.empty();
    this.render();
  }
  handleEditItem({ payload }) {
    if (!payload) {
      return;
    }
    const { newItem } = payload;
    const cardEl = this.contentEl.querySelector(`[${cardAttributes.cardId}="${newItem.id}"]`);
    if (!cardEl) {
      return;
    }
    this.contentEl.empty();
    this.render();
  }
  render() {
    const decksCardEl = this.contentEl.createDiv("better-recall-card better-recall__cards-list");
    this.deck.cardsArray.forEach((card) => {
      const cardEl = decksCardEl.createEl("div", {
        text: `${card.content.front} :: ${card.content.back}`,
        attr: {
          [cardAttributes.cardId]: card.id
        }
      });
      cardEl.onClickEvent(() => {
        new EditCardModal(this.plugin, this.deck, card).open();
      });
    });
    this.buttonsBarComp = new ButtonsBarComponent(this.contentEl).setSubmitButtonDisabled(false).setSubmitText("Add card").onSubmit(this.openAddCardModal.bind(this)).onClose(this.close.bind(this));
  }
  openAddCardModal() {
    new AddCardModal(this.plugin).open();
  }
  onClose() {
    super.onClose();
    this.plugin.getEventEmitter().off("editItem", this.handleEditItem.bind(this));
    this.plugin.getEventEmitter().off("addItem", this.handleAddItem.bind(this));
    this.plugin.getEventEmitter().off("deleteItem", this.handleDeleteItem.bind(this));
    this.plugin.decksManager.save();
    this.contentEl.empty();
  }
};

// src/ui/views/DecksView.ts
var visibleClass = "better-recall-deck-action--visible";
var rowAttributes = {
  newCardsCount: {
    plain: "data-new-cards-count",
    attr: "[data-new-cards-count]"
  },
  learnCardsCount: {
    plain: "data-learn-cards-count",
    attr: "[data-learn-cards-count]"
  },
  dueCardsCount: {
    plain: "data-due-cards-count",
    attr: "[data-due-cards-count]"
  }
};
var DecksView = class extends RecallSubView {
  constructor(plugin, recallView) {
    super(plugin, recallView);
    this.plugin.getEventEmitter().on("addDeck", this.handleAddDeck.bind(this));
    this.plugin.getEventEmitter().on("editDeck", this.handleEditDeck.bind(this));
    this.plugin.getEventEmitter().on("addItem", this.handleAddItem.bind(this));
    this.plugin.getEventEmitter().on("deleteItem", this.handleDeleteItem.bind(this));
    this.plugin.getEventEmitter().on("deleteDeck", this.handleDeleteDeck.bind(this));
  }
  render() {
    this.rootEl = this.recallView.rootEl.createDiv(`${CENTERED_VIEW} better-recall-decks-view`);
    this.renderDecks();
    this.renderButtons();
  }
  handleDeleteDeck() {
    if (this.plugin.decksManager.decksArray.length === 0) {
      this.recallView.openEmptyView();
      return;
    }
    this.recallView.rootEl.empty();
    this.render();
  }
  handleAddDeck() {
    this.recallView.rootEl.empty();
    this.render();
  }
  handleEditDeck({ payload }) {
    var _a;
    if (!payload) {
      return;
    }
    const { deck } = payload;
    const deckNameEl = (_a = this.getDeckRowEl(deck.id)) == null ? void 0 : _a.querySelector("a");
    if (!deckNameEl) {
      return;
    }
    deckNameEl.setText(deck.getName());
    deckNameEl.title = deck.getDescription();
  }
  handleDeleteItem({ payload }) {
    if (!payload) {
      return;
    }
    const { deckId } = payload;
    const deckRowEl = this.getDeckRowEl(deckId);
    if (!deckRowEl) {
      return;
    }
    this.refreshNewCardsCount(deckId, deckRowEl);
  }
  handleAddItem({ payload }) {
    if (!payload) {
      return;
    }
    const { deckId } = payload;
    const deckRowEl = this.getDeckRowEl(deckId);
    if (!deckRowEl) {
      return;
    }
    this.refreshNewCardsCount(deckId, deckRowEl);
    this.refreshLearnCardsCount(deckId, deckRowEl);
    this.refreshDueCardsCount(deckId, deckRowEl);
  }
  refreshDueCardsCount(deckId, deckRowEl) {
    const cardsCountEl = this.getDueCardsCountEl(deckRowEl);
    if (!cardsCountEl) {
      return;
    }
    const cardsCount = this.plugin.decksManager.getDecks()[deckId].dueCards.length;
    this.updateCount(cardsCountEl, cardsCount, DUE_CARDS_COLOR);
  }
  refreshLearnCardsCount(deckId, deckRowEl) {
    const cardsCountEl = this.getLearnCardsCountEl(deckRowEl);
    if (!cardsCountEl) {
      return;
    }
    const cardsCount = this.plugin.decksManager.getDecks()[deckId].learnCards.length;
    this.updateCount(cardsCountEl, cardsCount, LEARN_CARDS_COLOR);
  }
  refreshNewCardsCount(deckId, deckRowEl) {
    const cardsCountEl = this.getNewCardsCountEl(deckRowEl);
    if (!cardsCountEl) {
      return;
    }
    const cardsCount = this.plugin.decksManager.getDecks()[deckId].newCards.length;
    this.updateCount(cardsCountEl, cardsCount, NEW_CARDS_COLOR);
  }
  updateCount(el, cardsCount, className) {
    if (cardsCount > 0) {
      if (!el.hasClass(className)) {
        el.addClass(className);
      }
    } else {
      el.removeClass(className);
    }
    el.setText(String(cardsCount));
  }
  getDeckRowEl(deckId) {
    return this.recallView.rootEl.querySelector(`[data-deck-id="${deckId}"]`);
  }
  getNewCardsCountEl(deckRowEl) {
    return deckRowEl.querySelector(rowAttributes.newCardsCount.attr);
  }
  getLearnCardsCountEl(deckRowEl) {
    return deckRowEl.querySelector(rowAttributes.learnCardsCount.attr);
  }
  getDueCardsCountEl(deckRowEl) {
    return deckRowEl.querySelector(rowAttributes.dueCardsCount.attr);
  }
  handleDeckRowMouseEnter(event) {
    event.preventDefault();
    event.stopPropagation();
    const target = event.target;
    if (!target || !target.parentElement) {
      return;
    }
    target.addClass(visibleClass);
  }
  handleDeckRowMouseLeave(event) {
    event.preventDefault();
    event.stopPropagation();
    const target = event.target;
    if (!target) {
      return;
    }
    target == null ? void 0 : target.removeClass(visibleClass);
  }
  renderDecks() {
    const decksCardEl = this.rootEl.createDiv("better-recall-card");
    const tableEl = decksCardEl.createEl("table", {
      cls: "better-recall-deck-table"
    });
    const headerRow = tableEl.createEl("tr");
    headerRow.createEl("th", { text: "Deck" });
    headerRow.createEl("th", { text: "New" });
    headerRow.createEl("th", { text: "Learn" });
    headerRow.createEl("th", { text: "Due" });
    this.plugin.decksManager.decksArray.forEach((deck) => {
      const deckRowEl = tableEl.createEl("tr", {
        cls: "better-recall-deck",
        attr: {
          "data-deck-id": deck.id
        }
      });
      const deckDataEl = deckRowEl.createEl("td", {
        cls: "better-recall-deck-name"
      });
      deckRowEl.addEventListener("mouseenter", this.handleDeckRowMouseEnter);
      deckRowEl.addEventListener("mouseleave", this.handleDeckRowMouseLeave);
      const deckNameLink = deckDataEl.createEl("a", {
        text: deck.getName(),
        title: deck.getDescription()
      });
      deckNameLink.onClickEvent(() => {
        this.recallView.startReviewingDeck(deck);
      });
      this.renderDeckButtons(deckDataEl, deck);
      const newCardsLength = deck.newCards.length;
      const learnCardsLength = deck.learnCards.length;
      const dueCardsLength = deck.dueCards.length;
      deckRowEl.createEl("td", {
        text: `${newCardsLength}`,
        attr: { [rowAttributes.newCardsCount.plain]: newCardsLength },
        cls: newCardsLength > 0 ? NEW_CARDS_COLOR : ""
      });
      deckRowEl.createEl("td", {
        text: `${learnCardsLength}`,
        attr: { [rowAttributes.learnCardsCount.plain]: learnCardsLength },
        cls: learnCardsLength > 0 ? LEARN_CARDS_COLOR : ""
      });
      deckRowEl.createEl("td", {
        text: `${dueCardsLength}`,
        attr: { [rowAttributes.dueCardsCount.plain]: dueCardsLength },
        cls: dueCardsLength > 0 ? DUE_CARDS_COLOR : ""
      });
    });
  }
  renderDeckButtons(root, deck) {
    const container = root.createDiv("better-recall-deck__buttons");
    const cardsButtonEl = container.createEl("div", {
      cls: "better-recall-deck__button",
      attr: {
        role: "button",
        tabindex: "0"
      }
    });
    const walletCardsIcon = (0, import_obsidian10.getIcon)("wallet-cards");
    if (walletCardsIcon) {
      cardsButtonEl.appendChild(walletCardsIcon);
    }
    cardsButtonEl.onClickEvent(() => {
      new EditCardsModal(this.plugin, deck).open();
    });
    const editButtonEl = container.createEl("div", {
      cls: "better-recall-deck__button",
      attr: {
        role: "button",
        tabindex: "0"
      }
    });
    const penIcon = (0, import_obsidian10.getIcon)("pen");
    if (penIcon) {
      editButtonEl.appendChild(penIcon);
    }
    editButtonEl.onClickEvent(() => {
      new EditDeckModal(this.plugin, deck).open();
    });
  }
  renderButtons() {
    const buttonsBarEl = this.rootEl.createDiv("better-recall-buttons-bar");
    new import_obsidian10.ButtonComponent(buttonsBarEl).setButtonText("Create Deck").onClick(this.openDeckModal.bind(this));
    new import_obsidian10.ButtonComponent(buttonsBarEl).setButtonText("Add card").setCta().onClick(() => {
      new AddCardModal(this.plugin).open();
    });
  }
  onClose() {
    this.plugin.getEventEmitter().off("addDeck", this.handleAddDeck.bind(this));
    this.plugin.getEventEmitter().off("editDeck", this.handleEditDeck.bind(this));
    this.plugin.getEventEmitter().off("addItem", this.handleAddItem.bind(this));
    this.plugin.getEventEmitter().off("deleteItem", this.handleDeleteItem.bind(this));
    this.plugin.getEventEmitter().off("deleteDeck", this.handleDeleteDeck.bind(this));
    const deckRowEls = this.rootEl.querySelectorAll(".better-recall-deck");
    deckRowEls.forEach((deckRowEl) => {
      deckRowEl.removeEventListener("mouseenter", this.handleDeckRowMouseEnter);
      deckRowEl.removeEventListener("mouseleave", this.handleDeckRowMouseLeave);
    });
  }
};

// src/ui/views/index.ts
var FILE_VIEW_TYPE = "recall-view";
var RecallView = class extends import_obsidian11.FileView {
  constructor(plugin, leaf) {
    super(leaf);
    this.plugin = plugin;
    this.allowNoFile = true;
    this.icon = "blocks";
    const viewContent = this.containerEl.querySelector(".view-content");
    if (!viewContent) {
      return;
    }
    this.rootEl = viewContent.createDiv("better-recall-recall-view");
    this.reviewView = new ReviewView(plugin, this);
    this.emptyView = new EmptyView(plugin, this);
    this.decksView = new DecksView(plugin, this);
    this.setViewMode(plugin.decksManager.decksArray.length === 0 ? 0 /* Empty */ : 1 /* Decks */);
  }
  onOpen() {
    return __async(this, null, function* () {
      this.renderView();
      this.plugin.getEventEmitter().on("addDeck", this.handleAddDeck.bind(this));
    });
  }
  handleAddDeck() {
    if (this.viewMode === 0 /* Empty */) {
      this.setViewMode(1 /* Decks */);
      this.renderView();
    }
  }
  setViewMode(viewMode) {
    var _a;
    (_a = this.currentView) == null ? void 0 : _a.onClose();
    this.viewMode = viewMode;
    switch (this.viewMode) {
      case 0 /* Empty */:
        this.currentView = this.emptyView;
        break;
      case 1 /* Decks */:
        this.currentView = this.decksView;
        break;
      case 2 /* Review */:
        this.currentView = this.reviewView;
        break;
    }
  }
  startReviewingDeck(deck) {
    this.reviewView.setDeck(deck);
    this.setViewMode(2 /* Review */);
    this.renderView();
  }
  openDecksView() {
    this.setViewMode(1 /* Decks */);
    this.renderView();
  }
  openEmptyView() {
    this.setViewMode(0 /* Empty */);
    this.renderView();
  }
  renderView() {
    var _a;
    this.rootEl.empty();
    (_a = this.currentView) == null ? void 0 : _a.render();
  }
  setState(state, result) {
    return __async(this, null, function* () {
      yield __superGet(RecallView.prototype, this, "setState").call(this, state, result);
    });
  }
  onClose() {
    return __async(this, null, function* () {
      var _a;
      (_a = this.currentView) == null ? void 0 : _a.onClose();
      this.plugin.getEventEmitter().off("addDeck", this.handleAddDeck.bind(this));
      yield __superGet(RecallView.prototype, this, "onClose").call(this);
    });
  }
  getState() {
    const state = super.getState();
    return state;
  }
  getDisplayText() {
    return "Recall";
  }
  getViewType() {
    return FILE_VIEW_TYPE;
  }
};

// src/data/deck.ts
function jsonObjectToDeck(algorithm, jsonObject) {
  const cards = Object.entries(jsonObject.cards).reduce((acc, [id, card]) => {
    acc[id] = __spreadProps(__spreadValues({}, card), {
      id,
      lastReviewDate: convertStringToDate(card.lastReviewDate),
      nextReviewDate: convertStringToDate(card.nextReviewDate)
    });
    return acc;
  }, {});
  return new Deck(algorithm, jsonObject.name, jsonObject.description, jsonObject.id, convertStringToDate(jsonObject.createdAt), convertStringToDate(jsonObject.updatedAt), cards);
}
function convertStringToDate(dateStr) {
  return dateStr ? new Date(dateStr) : void 0;
}
var Deck = class {
  constructor(algorithm, name, description, id = v4_default(), createdAt = new Date(), updatedAt = new Date(), cards = {}) {
    this.algorithm = algorithm;
    this.name = name;
    this.description = description;
    this.id = id;
    this.createdAt = createdAt;
    this.updatedAt = updatedAt;
    this.cards = cards;
  }
  toJsonObject() {
    return {
      id: this.id,
      name: this.name,
      description: this.description,
      createdAt: this.createdAt.toDateString(),
      updatedAt: this.updatedAt.toDateString(),
      cards: Object.entries(this.cards).reduce((acc, [id, card]) => {
        const newCard = __spreadValues({}, card);
        delete newCard.id;
        acc[id] = newCard;
        return acc;
      }, {})
    };
  }
  get cardsArray() {
    return Object.values(this.cards);
  }
  get learnCards() {
    return this.cardsArray.reduce((acc, curr) => {
      if (curr.state === 1 /* LEARNING */ || curr.state === 3 /* RELEARNING */) {
        acc.push(curr);
      }
      return acc;
    }, []);
  }
  get dueCards() {
    return this.cardsArray.reduce((acc, curr) => {
      if (curr.state === 2 /* REVIEW */ && this.algorithm.isDueToday(curr)) {
        acc.push(curr);
      }
      return acc;
    }, []);
  }
  get newCards() {
    return this.cardsArray.reduce((acc, curr) => {
      if (curr.state === 0 /* NEW */) {
        acc.push(curr);
      }
      return acc;
    }, []);
  }
  setName(name) {
    this.name = name;
  }
  setDescription(description) {
    this.description = description;
  }
  getName() {
    return this.name;
  }
  getDescription() {
    return this.description;
  }
};

// src/data/manager/decks-manager.ts
var DecksManager = class {
  constructor(plugin, algorithm) {
    this.plugin = plugin;
    this.decks = {};
    this.algorithm = algorithm;
  }
  load() {
    return __async(this, null, function* () {
      const decks = this.plugin.getData().decks;
      if (!decks) {
        return;
      }
      decks.forEach((deck) => {
        this.decks[deck.id] = jsonObjectToDeck(this.algorithm, deck);
      });
    });
  }
  create(deckName, description) {
    return __async(this, null, function* () {
      deckName = deckName.trim();
      if (!this.isValidFileName(deckName)) {
        throw new Error(`Invalid deck name: ${deckName}`);
      }
      if (this.decksArray.find((deck) => deck.getName() === deckName)) {
        throw new Error(`Deck name already exists: ${deckName}`);
      }
      const deckData = new Deck(this.algorithm, deckName, description);
      this.decks[deckData.id] = deckData;
      yield this.save();
      return deckData;
    });
  }
  updateInformation(id, newName, newDescription) {
    return __async(this, null, function* () {
      newName = newName.trim();
      if (!this.isValidFileName(newName)) {
        throw new Error(`Invalid deck name: ${newName}`);
      }
      if (!(id in this.decks)) {
        throw new Error(`Deck with id does not exist: ${id}`);
      }
      this.decks[id].setName(newName);
      this.decks[id].setDescription(newDescription);
      yield this.save();
      return this.decks[id];
    });
  }
  addCard(deckId, card) {
    if (!(deckId in this.decks)) {
      throw new Error(`No deck with id found: ${deckId}`);
    }
    this.decks[deckId].cards[card.id] = card;
  }
  updateCardContent(deckId, updatedCard) {
    if (!(deckId in this.decks)) {
      throw new Error(`No deck with id found: ${deckId}`);
    }
    if (!(updatedCard.id in this.decks[deckId].cards)) {
      throw new Error(`No card in deck with card id found: ${updatedCard.id}`);
    }
    this.decks[deckId].cards[updatedCard.id] = updatedCard;
  }
  removeCard(deckId, cardId) {
    if (!(deckId in this.decks)) {
      throw new Error(`No deck with id found: ${deckId}`);
    }
    if (!(cardId in this.decks[deckId].cards)) {
      throw new Error(`No card in deck with card id found: ${cardId}`);
    }
    delete this.decks[deckId].cards[cardId];
  }
  save() {
    return __async(this, null, function* () {
      this.plugin.getData().decks = this.toJsonStructure();
      yield this.plugin.savePluginData();
    });
  }
  delete(id) {
    return __async(this, null, function* () {
      if (!(id in this.decks)) {
        throw new Error(`Deck name does not exist: ${id}`);
      }
      delete this.decks[id];
      yield this.save();
    });
  }
  get decksArray() {
    return Object.values(this.decks);
  }
  getDecks() {
    return this.decks;
  }
  toJsonStructure() {
    const decks = this.decksArray.map((deck) => deck.toJsonObject());
    return decks;
  }
  isValidFileName(fileName) {
    if (!fileName) {
      return false;
    }
    const maxLength = 255;
    if (fileName.length > maxLength) {
      return false;
    }
    const invalidChars = /[<>:"/\\|?*\x00-\x1F]/;
    if (invalidChars.test(fileName)) {
      return false;
    }
    if (fileName.endsWith(".")) {
      return false;
    }
    return true;
  }
};

// src/data/event/index.ts
var EventEmitter = class {
  constructor() {
    this.listeners = {};
  }
  on(type, listener, priority = 0) {
    var _a, _b, _c;
    (_b = (_a = this.listeners)[type]) != null ? _b : _a[type] = [];
    (_c = this.listeners[type]) == null ? void 0 : _c.push({ listener, once: false, priority });
    this.sortListeners(type);
  }
  once(type, listener, priority = 0) {
    var _a, _b, _c;
    (_b = (_a = this.listeners)[type]) != null ? _b : _a[type] = [];
    (_c = this.listeners[type]) == null ? void 0 : _c.push({ listener, once: true, priority });
    this.sortListeners(type);
  }
  off(type, listener) {
    var _a;
    if (!this.listeners[type]) {
      return;
    }
    this.listeners[type] = (_a = this.listeners[type]) == null ? void 0 : _a.filter((entry) => entry.listener !== listener);
  }
  emit(type, payload) {
    const listeners = this.listeners[type];
    if (!listeners) {
      return;
    }
    const event = { payload };
    listeners.slice().forEach((entry) => {
      entry.listener(event);
      if (entry.once) {
        this.off(type, entry.listener);
      }
    });
  }
  sortListeners(type) {
    var _a;
    if (this.listeners[type]) {
      (_a = this.listeners[type]) == null ? void 0 : _a.sort((a, b) => b.priority - a.priority);
    }
  }
};

// src/ui/settings/SettingsTab.ts
var import_obsidian13 = require("obsidian");

// src/ui/components/ResetButtonComponent.ts
var import_obsidian12 = require("obsidian");
var ResetButtonComponent = class extends import_obsidian12.ButtonComponent {
  constructor(contentEl) {
    super(contentEl);
    this.contentEl = contentEl;
    this.setTooltip("Restore default");
    this.setIcon("rotate-ccw");
    this.render();
  }
  render() {
    this.buttonEl.classList.add("clickable-icon");
    this.buttonEl.classList.add("extra-setting-button");
  }
};

// src/ui/settings/SettingsTab.ts
var SettingsTab = class extends import_obsidian13.PluginSettingTab {
  constructor(plugin) {
    super(plugin.app, plugin);
    this.plugin = plugin;
    this.titleParameterMapping = {
      "Lapse interval": {
        parameter: "lapseInterval",
        description: "The multiplier applied to the current interval when a card lapses."
      },
      "Easy interval": {
        parameter: "easyInterval",
        description: "The interval (in days) assigned to a card when rated as `easy` during learning/relearning."
      },
      "Easy bonus": {
        parameter: "easyBonus",
        description: "The multiplier applied to the interval when a review card is rated as `easy`."
      },
      "Graduating interval": {
        parameter: "graduatingInterval",
        description: "The interval (in days) assigned to a card when it graduates from learning to review."
      },
      "Min ease factor": {
        parameter: "minEaseFactor",
        description: "The minimum allowed ease factor for a card."
      },
      "Ease factor decrement": {
        parameter: "easeFactorDecrement",
        description: "The amount by which the ease factor is decreased when a card is rated as `again`."
      },
      "Ease factor increment": {
        parameter: "easeFactorIncrement",
        description: "The amount by which the ease factor is increased when a card is rated as `easy`."
      },
      "Hard interval multiplier": {
        parameter: "hardIntervalMultiplier",
        description: "The multiplier applied to the current interval when a review card is rated as `hard`."
      },
      "Learning steps": {
        parameter: "learningSteps",
        description: "Comma-separated step intervals (in minutes) for new cards in the learning phase."
      },
      "Relearning steps": {
        parameter: "relearningSteps",
        description: "Comma-separated step intervals (in minutes) for cards in the relearning phase."
      }
    };
  }
  display() {
    this.containerEl.empty();
    Object.entries(this.titleParameterMapping).forEach(([key, { parameter, description }]) => {
      let textComponent = null;
      const pluginValue = this.plugin.getSettings().ankiParameters[parameter];
      const setting = new import_obsidian13.Setting(this.containerEl).setName(key).setDesc(description);
      new ResetButtonComponent(setting.controlEl).onClick(() => __async(this, null, function* () {
        if (!textComponent) {
          return;
        }
        const defaultValue = DEFAULT_SETTINGS.ankiParameters[parameter];
        this.setValue(textComponent, defaultValue);
        this.plugin.setAnkiParameter(parameter, defaultValue);
        yield this.plugin.savePluginData();
      }));
      setting.addText((text) => {
        textComponent = text;
        this.setValue(text, pluginValue);
        text.onChange((input) => __async(this, null, function* () {
          input = input.trim();
          if (parameter === "learningSteps" || parameter === "relearningSteps") {
            if (!this.isStringValidArray(input)) {
              return;
            }
            const newValue = this.parseStringToArray(input);
            this.plugin.setAnkiParameter(parameter, newValue);
          } else {
            if (isNaN(+input)) {
              return;
            }
            this.plugin.setAnkiParameter(parameter, Number(input));
          }
          yield this.plugin.savePluginData();
        }));
      });
    });
  }
  setValue(text, value) {
    if (Array.isArray(value)) {
      text.setValue(value.join(","));
    } else {
      text.setValue(value.toString());
    }
  }
  parseStringToArray(input) {
    return input.trim().split(",").map((text) => Number(text));
  }
  isStringValidArray(input) {
    return input.trim().split(",").every((text) => !isNaN(+text));
  }
};

// src/main.ts
var BetterRecallPlugin = class extends import_obsidian14.Plugin {
  constructor() {
    super(...arguments);
    this.algorithm = new AnkiAlgorithm();
    this.decksManager = new DecksManager(this, this.algorithm);
  }
  onload() {
    return __async(this, null, function* () {
      console.log("loading better recall");
      this.eventEmitter = new EventEmitter();
      yield this.loadPluginData();
      this.algorithm.setParameters(this.getSettings().ankiParameters);
      yield this.decksManager.load();
      this.registerView(FILE_VIEW_TYPE, (leaf) => new RecallView(this, leaf));
      registerCommands(this);
      this.addRibbonIcon("wallet-cards", "Open decks", () => {
        this.openRecallView();
      });
      this.addSettingTab(new SettingsTab(this));
    });
  }
  onunload() {
    console.log("unloading better recall");
  }
  openRecallView() {
    const leaf = this.app.workspace.getLeaf(false);
    leaf.setViewState({
      type: FILE_VIEW_TYPE,
      state: {}
    });
    this.app.workspace.setActiveLeaf(leaf);
  }
  loadPluginData() {
    return __async(this, null, function* () {
      const data = yield this.loadData();
      if (data) {
        Object.entries(DEFAULT_SETTINGS).forEach(([key, value]) => {
          if (data.settings[key] === void 0) {
            data.settings[key] = value;
          }
        });
      }
      this.data = Object.assign({ settings: __spreadValues({}, DEFAULT_SETTINGS) }, {}, data);
    });
  }
  getEventEmitter() {
    return this.eventEmitter;
  }
  getSettings() {
    return this.data.settings;
  }
  setAnkiParameter(key, value) {
    if (key === "learningSteps" || key === "relearningSteps") {
      if (!Array.isArray(value)) {
        return;
      }
      this.getSettings().ankiParameters[key] = value;
      return;
    }
    if (typeof value === "number") {
      this.getSettings().ankiParameters[key] = value;
    }
  }
  getData() {
    return this.data;
  }
  savePluginData() {
    return __async(this, null, function* () {
      yield this.saveData(this.data);
    });
  }
};

/* nosourcemap */